
DEV_LTC2944.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db0  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003fb8  08003fb8  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fb8  08003fb8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000030  08003ff0  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003ff0  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdca  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b7f  00000000  00000000  0002ce2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  0002e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002f3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029046  00000000  00000000  0002fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000943e  00000000  00000000  00058d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f95c7  00000000  00000000  0006217c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015b743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002914  00000000  00000000  0015b7c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000030 	.word	0x20000030
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08003f58 	.word	0x08003f58

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000034 	.word	0x20000034
 80001fc:	08003f58 	.word	0x08003f58

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <Dev_Gas_Gauge_IntHwInit>:
Dev_Gas_Gauge_Configuration_t	Configuration_Parameters_Array[DEV_GASG_MAX_ID];

I2C_HandleTypeDef 				DEV_GAS_GAUGE_IIC_HANDLER;

ReturnCode_t Dev_Gas_Gauge_IntHwInit( uint8_t ID )
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <Dev_Gas_Gauge_IntHwInit+0xd8>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a2e      	ldr	r2, [pc, #184]	; (8000b14 <Dev_Gas_Gauge_IntHwInit+0xd8>)
 8000a5c:	f043 0320 	orr.w	r3, r3, #32
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <Dev_Gas_Gauge_IntHwInit+0xd8>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0320 	and.w	r3, r3, #32
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
	/**I2C2 GPIO Configuration
	    PF0     ------> I2C2_SDA
	    PF1     ------> I2C2_SCL
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a72:	2312      	movs	r3, #18
 8000a74:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4823      	ldr	r0, [pc, #140]	; (8000b18 <Dev_Gas_Gauge_IntHwInit+0xdc>)
 8000a8a:	f000 febf 	bl	800180c <HAL_GPIO_Init>

	/* I2C2 clock enable */
	__HAL_RCC_I2C2_CLK_ENABLE();
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <Dev_Gas_Gauge_IntHwInit+0xd8>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	4a20      	ldr	r2, [pc, #128]	; (8000b14 <Dev_Gas_Gauge_IntHwInit+0xd8>)
 8000a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <Dev_Gas_Gauge_IntHwInit+0xd8>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]

	DEV_GAS_GAUGE_IIC_HANDLER.Instance = I2C2;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <Dev_Gas_Gauge_IntHwInit+0xe4>)
 8000aaa:	601a      	str	r2, [r3, #0]
	DEV_GAS_GAUGE_IIC_HANDLER.Init.Timing = 0x307075B1;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000aae:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <Dev_Gas_Gauge_IntHwInit+0xe8>)
 8000ab0:	605a      	str	r2, [r3, #4]
	DEV_GAS_GAUGE_IIC_HANDLER.Init.OwnAddress1 = 0;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
	DEV_GAS_GAUGE_IIC_HANDLER.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	60da      	str	r2, [r3, #12]
	DEV_GAS_GAUGE_IIC_HANDLER.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
	DEV_GAS_GAUGE_IIC_HANDLER.Init.OwnAddress2 = 0;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
	DEV_GAS_GAUGE_IIC_HANDLER.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
	DEV_GAS_GAUGE_IIC_HANDLER.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
	DEV_GAS_GAUGE_IIC_HANDLER.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&DEV_GAS_GAUGE_IIC_HANDLER) != HAL_OK)
 8000adc:	480f      	ldr	r0, [pc, #60]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000ade:	f001 f827 	bl	8001b30 <HAL_I2C_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d000      	beq.n	8000aea <Dev_Gas_Gauge_IntHwInit+0xae>
	{
		__asm("BKPT 255");
 8000ae8:	beff      	bkpt	0x00ff
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&DEV_GAS_GAUGE_IIC_HANDLER, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000aee:	f001 fcf9 	bl	80024e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d000      	beq.n	8000afa <Dev_Gas_Gauge_IntHwInit+0xbe>
	{
		__asm("BKPT 255");
 8000af8:	beff      	bkpt	0x00ff
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&DEV_GAS_GAUGE_IIC_HANDLER, 0) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <Dev_Gas_Gauge_IntHwInit+0xe0>)
 8000afe:	f001 fd3c 	bl	800257a <HAL_I2CEx_ConfigDigitalFilter>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d000      	beq.n	8000b0a <Dev_Gas_Gauge_IntHwInit+0xce>
	{
		__asm("BKPT 255");
 8000b08:	beff      	bkpt	0x00ff
	}

	return ANSWERED_REQUEST;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48001400 	.word	0x48001400
 8000b1c:	2000005c 	.word	0x2000005c
 8000b20:	40005800 	.word	0x40005800
 8000b24:	307075b1 	.word	0x307075b1

08000b28 <Dev_Gas_Gauge_ExtDevConfig>:

ReturnCode_t Dev_Gas_Gauge_ExtDevConfig( uint8_t ID, Dev_Gas_Gauge_Configuration_t Config_Parameters )
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	e883 0006 	stmia.w	r3, {r1, r2}
 8000b34:	4603      	mov	r3, r0
 8000b36:	73fb      	strb	r3, [r7, #15]
	uint8_t	Control_Register_Value[2];
	ReturnCode_t ReturnValue;
	float	Prescaler_Value_M;

	ReturnValue = OPERATION_RUNNING;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	83fb      	strh	r3, [r7, #30]

	memcpy(&Configuration_Parameters_Array[ID], &Config_Parameters, sizeof(Dev_Gas_Gauge_Configuration_t));
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	4a4d      	ldr	r2, [pc, #308]	; (8000c78 <Dev_Gas_Gauge_ExtDevConfig+0x150>)
 8000b42:	4413      	add	r3, r2
 8000b44:	1d39      	adds	r1, r7, #4
 8000b46:	2208      	movs	r2, #8
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 f9f1 	bl	8003f30 <memcpy>

	Control_Register_Value[0] = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	753b      	strb	r3, [r7, #20]

	Control_Register_Value[0] |= Configuration_Parameters_Array[ID].ADC_Mode << 6;
 8000b52:	7d3b      	ldrb	r3, [r7, #20]
 8000b54:	b25a      	sxtb	r2, r3
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	4947      	ldr	r1, [pc, #284]	; (8000c78 <Dev_Gas_Gauge_ExtDevConfig+0x150>)
 8000b5a:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8000b5e:	019b      	lsls	r3, r3, #6
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	753b      	strb	r3, [r7, #20]
	Control_Register_Value[0] |= Configuration_Parameters_Array[ID].Prescaler_Factor << 3;
 8000b6a:	7d3b      	ldrb	r3, [r7, #20]
 8000b6c:	b25a      	sxtb	r2, r3
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	4941      	ldr	r1, [pc, #260]	; (8000c78 <Dev_Gas_Gauge_ExtDevConfig+0x150>)
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	440b      	add	r3, r1
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b25b      	sxtb	r3, r3
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	753b      	strb	r3, [r7, #20]
	Control_Register_Value[0] |= Configuration_Parameters_Array[ID].Alert_Pin_Mode << 1;
 8000b84:	7d3b      	ldrb	r3, [r7, #20]
 8000b86:	b25a      	sxtb	r2, r3
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	493b      	ldr	r1, [pc, #236]	; (8000c78 <Dev_Gas_Gauge_ExtDevConfig+0x150>)
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	440b      	add	r3, r1
 8000b90:	789b      	ldrb	r3, [r3, #2]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	753b      	strb	r3, [r7, #20]
	if(Configuration_Parameters_Array[ID].Shutdown_Status)
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	4a35      	ldr	r2, [pc, #212]	; (8000c78 <Dev_Gas_Gauge_ExtDevConfig+0x150>)
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	78db      	ldrb	r3, [r3, #3]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <Dev_Gas_Gauge_ExtDevConfig+0x90>
		Control_Register_Value[0] |= 1;
 8000bac:	7d3b      	ldrb	r3, [r7, #20]
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	753b      	strb	r3, [r7, #20]
 8000bb6:	e004      	b.n	8000bc2 <Dev_Gas_Gauge_ExtDevConfig+0x9a>
	else
		Control_Register_Value[0] &= ~1;
 8000bb8:	7d3b      	ldrb	r3, [r7, #20]
 8000bba:	f023 0301 	bic.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	753b      	strb	r3, [r7, #20]

	if(HAL_I2C_Mem_Write(&DEV_GAS_GAUGE_IIC_HANDLER, DEV_GASG_I2C_ADDRESS, DEV_GASG_Control, I2C_MEMADD_SIZE_8BIT, Control_Register_Value, 1, 50) == HAL_OK)
 8000bc2:	2332      	movs	r3, #50	; 0x32
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	21c8      	movs	r1, #200	; 0xc8
 8000bd6:	4829      	ldr	r0, [pc, #164]	; (8000c7c <Dev_Gas_Gauge_ExtDevConfig+0x154>)
 8000bd8:	f001 f83a 	bl	8001c50 <HAL_I2C_Mem_Write>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d141      	bne.n	8000c66 <Dev_Gas_Gauge_ExtDevConfig+0x13e>
	{
		Prescaler_Value_M = Perscaler_Table[Configuration_Parameters_Array[ID].Prescaler_Factor];
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	4a24      	ldr	r2, [pc, #144]	; (8000c78 <Dev_Gas_Gauge_ExtDevConfig+0x150>)
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	4413      	add	r3, r2
 8000bea:	785b      	ldrb	r3, [r3, #1]
 8000bec:	4a24      	ldr	r2, [pc, #144]	; (8000c80 <Dev_Gas_Gauge_ExtDevConfig+0x158>)
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	61bb      	str	r3, [r7, #24]
		GASG_Updated_Data[ID].Qlsb = DEV_GASG_QLSB_CTE *
				(DEV_GASG_Rsense_CTE / Configuration_Parameters_Array[ID].RSense_Value) *
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	4a1f      	ldr	r2, [pc, #124]	; (8000c78 <Dev_Gas_Gauge_ExtDevConfig+0x150>)
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	3304      	adds	r3, #4
 8000c00:	ed93 7a00 	vldr	s14, [r3]
 8000c04:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8000c84 <Dev_Gas_Gauge_ExtDevConfig+0x15c>
 8000c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
		GASG_Updated_Data[ID].Qlsb = DEV_GASG_QLSB_CTE *
 8000c0c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000c88 <Dev_Gas_Gauge_ExtDevConfig+0x160>
 8000c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c14:	ee17 0a90 	vmov	r0, s15
 8000c18:	f7ff fc56 	bl	80004c8 <__aeabi_f2d>
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	460d      	mov	r5, r1
				(Prescaler_Value_M / 4096.0);
 8000c20:	69b8      	ldr	r0, [r7, #24]
 8000c22:	f7ff fc51 	bl	80004c8 <__aeabi_f2d>
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <Dev_Gas_Gauge_ExtDevConfig+0x164>)
 8000c2c:	f7ff fdce 	bl	80007cc <__aeabi_ddiv>
 8000c30:	4602      	mov	r2, r0
 8000c32:	460b      	mov	r3, r1
				(DEV_GASG_Rsense_CTE / Configuration_Parameters_Array[ID].RSense_Value) *
 8000c34:	4620      	mov	r0, r4
 8000c36:	4629      	mov	r1, r5
 8000c38:	f7ff fc9e 	bl	8000578 <__aeabi_dmul>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	460c      	mov	r4, r1
 8000c40:	461a      	mov	r2, r3
 8000c42:	4623      	mov	r3, r4
		GASG_Updated_Data[ID].Qlsb = DEV_GASG_QLSB_CTE *
 8000c44:	7bfc      	ldrb	r4, [r7, #15]
				(DEV_GASG_Rsense_CTE / Configuration_Parameters_Array[ID].RSense_Value) *
 8000c46:	4610      	mov	r0, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f7ff fea7 	bl	800099c <__aeabi_d2f>
 8000c4e:	4601      	mov	r1, r0
		GASG_Updated_Data[ID].Qlsb = DEV_GASG_QLSB_CTE *
 8000c50:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <Dev_Gas_Gauge_ExtDevConfig+0x168>)
 8000c52:	4623      	mov	r3, r4
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4423      	add	r3, r4
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3310      	adds	r3, #16
 8000c5e:	6019      	str	r1, [r3, #0]

		ReturnValue = ANSWERED_REQUEST;
 8000c60:	2300      	movs	r3, #0
 8000c62:	83fb      	strh	r3, [r7, #30]
 8000c64:	e002      	b.n	8000c6c <Dev_Gas_Gauge_ExtDevConfig+0x144>
	}
	else
	{
		ReturnValue = ERR_DEVICE;
 8000c66:	f248 039b 	movw	r3, #32923	; 0x809b
 8000c6a:	83fb      	strh	r3, [r7, #30]
	}

	return ReturnValue;
 8000c6c:	8bfb      	ldrh	r3, [r7, #30]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3720      	adds	r7, #32
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bdb0      	pop	{r4, r5, r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000a8 	.word	0x200000a8
 8000c7c:	2000005c 	.word	0x2000005c
 8000c80:	20000000 	.word	0x20000000
 8000c84:	3d4ccccd 	.word	0x3d4ccccd
 8000c88:	39b24207 	.word	0x39b24207
 8000c8c:	40b00000 	.word	0x40b00000
 8000c90:	200000c8 	.word	0x200000c8
 8000c94:	00000000 	.word	0x00000000

08000c98 <Dev_Gas_Gauge_Get_Battery_Data>:
//
//	return ReturnValue;
//}

ReturnCode_t Dev_Gas_Gauge_Get_Battery_Data( uint8_t  ID , GAS_Gauge_Data_t *Batt_Data)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	ed2d 8b02 	vpush	{d8}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af04      	add	r7, sp, #16
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
	ReturnCode_t ReturnValue;
	uint16_t Temp;

	if(HAL_I2C_Mem_Read(&DEV_GAS_GAUGE_IIC_HANDLER, DEV_GASG_I2C_ADDRESS, DEV_GASG_Status, I2C_MEMADD_SIZE_8BIT, DEV_GASG_DataBuffer, 23, 250) == HAL_OK) //if(IIC_ReceiveData(DEV_GASG_IIC_ID_Array[ID], DEV_GASG_Status, DEV_GASG_DataBuffer, 23) == ANSWERED_REQUEST)
 8000ca8:	23fa      	movs	r3, #250	; 0xfa
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	2317      	movs	r3, #23
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	4b7b      	ldr	r3, [pc, #492]	; (8000ea0 <Dev_Gas_Gauge_Get_Battery_Data+0x208>)
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	21c8      	movs	r1, #200	; 0xc8
 8000cba:	487a      	ldr	r0, [pc, #488]	; (8000ea4 <Dev_Gas_Gauge_Get_Battery_Data+0x20c>)
 8000cbc:	f001 f8dc 	bl	8001e78 <HAL_I2C_Mem_Read>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 80d4 	bne.w	8000e70 <Dev_Gas_Gauge_Get_Battery_Data+0x1d8>
	{
		Temp = (DEV_GASG_DataBuffer[DEV_GASG_Voltage_MSB] << 8) | DEV_GASG_DataBuffer[DEV_GASG_Voltage_LSB];
 8000cc8:	4b75      	ldr	r3, [pc, #468]	; (8000ea0 <Dev_Gas_Gauge_Get_Battery_Data+0x208>)
 8000cca:	7a1b      	ldrb	r3, [r3, #8]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	4b73      	ldr	r3, [pc, #460]	; (8000ea0 <Dev_Gas_Gauge_Get_Battery_Data+0x208>)
 8000cd2:	7a5b      	ldrb	r3, [r3, #9]
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	81fb      	strh	r3, [r7, #14]
		GASG_Updated_Data[ID].Voltage = DEV_GASG_Voltage_CTE * (float)(Temp / 65535.0);
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fbe0 	bl	80004a4 <__aeabi_i2d>
 8000ce4:	a368      	add	r3, pc, #416	; (adr r3, 8000e88 <Dev_Gas_Gauge_Get_Battery_Data+0x1f0>)
 8000ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cea:	f7ff fd6f 	bl	80007cc <__aeabi_ddiv>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460c      	mov	r4, r1
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	f7ff fe51 	bl	800099c <__aeabi_d2f>
 8000cfa:	ee07 0a10 	vmov	s14, r0
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	eddf 7a69 	vldr	s15, [pc, #420]	; 8000ea8 <Dev_Gas_Gauge_Get_Battery_Data+0x210>
 8000d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d08:	4968      	ldr	r1, [pc, #416]	; (8000eac <Dev_Gas_Gauge_Get_Battery_Data+0x214>)
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	440b      	add	r3, r1
 8000d14:	3304      	adds	r3, #4
 8000d16:	edc3 7a00 	vstr	s15, [r3]

		Temp = (DEV_GASG_DataBuffer[DEV_GASG_Current_MSB] << 8) | DEV_GASG_DataBuffer[DEV_GASG_Current_LSB];
 8000d1a:	4b61      	ldr	r3, [pc, #388]	; (8000ea0 <Dev_Gas_Gauge_Get_Battery_Data+0x208>)
 8000d1c:	7b9b      	ldrb	r3, [r3, #14]
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	4b5f      	ldr	r3, [pc, #380]	; (8000ea0 <Dev_Gas_Gauge_Get_Battery_Data+0x208>)
 8000d24:	7bdb      	ldrb	r3, [r3, #15]
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	81fb      	strh	r3, [r7, #14]
		GASG_Updated_Data[ID].Current = (float)(DEV_GASG_VSense_CTE / Configuration_Parameters_Array[ID].RSense_Value) * (float)((Temp - 32767.0)/ 32767.0);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a5f      	ldr	r2, [pc, #380]	; (8000eb0 <Dev_Gas_Gauge_Get_Battery_Data+0x218>)
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	4413      	add	r3, r2
 8000d36:	3304      	adds	r3, #4
 8000d38:	edd3 7a00 	vldr	s15, [r3]
 8000d3c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000eb4 <Dev_Gas_Gauge_Get_Battery_Data+0x21c>
 8000d40:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8000d44:	89fb      	ldrh	r3, [r7, #14]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fbac 	bl	80004a4 <__aeabi_i2d>
 8000d4c:	a350      	add	r3, pc, #320	; (adr r3, 8000e90 <Dev_Gas_Gauge_Get_Battery_Data+0x1f8>)
 8000d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d52:	f7ff fa59 	bl	8000208 <__aeabi_dsub>
 8000d56:	4603      	mov	r3, r0
 8000d58:	460c      	mov	r4, r1
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	a34c      	add	r3, pc, #304	; (adr r3, 8000e90 <Dev_Gas_Gauge_Get_Battery_Data+0x1f8>)
 8000d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d64:	f7ff fd32 	bl	80007cc <__aeabi_ddiv>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	4621      	mov	r1, r4
 8000d70:	f7ff fe14 	bl	800099c <__aeabi_d2f>
 8000d74:	ee07 0a90 	vmov	s15, r0
 8000d78:	79fa      	ldrb	r2, [r7, #7]
 8000d7a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000d7e:	494b      	ldr	r1, [pc, #300]	; (8000eac <Dev_Gas_Gauge_Get_Battery_Data+0x214>)
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	3308      	adds	r3, #8
 8000d8c:	edc3 7a00 	vstr	s15, [r3]

		Temp = (DEV_GASG_DataBuffer[DEV_GASG_Temperature_MSB] << 8) | DEV_GASG_DataBuffer[DEV_GASG_Temperature_LSB];
 8000d90:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <Dev_Gas_Gauge_Get_Battery_Data+0x208>)
 8000d92:	7d1b      	ldrb	r3, [r3, #20]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	4b41      	ldr	r3, [pc, #260]	; (8000ea0 <Dev_Gas_Gauge_Get_Battery_Data+0x208>)
 8000d9a:	7d5b      	ldrb	r3, [r3, #21]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	81fb      	strh	r3, [r7, #14]
		GASG_Updated_Data[ID].Temperature = (DEV_GASG_TSense_CTE * (float)(Temp / 65535.0)) - 273.15; // Return the temperature in celcius
 8000da4:	89fb      	ldrh	r3, [r7, #14]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fb7c 	bl	80004a4 <__aeabi_i2d>
 8000dac:	a336      	add	r3, pc, #216	; (adr r3, 8000e88 <Dev_Gas_Gauge_Get_Battery_Data+0x1f0>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	f7ff fd0b 	bl	80007cc <__aeabi_ddiv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	460c      	mov	r4, r1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	f7ff fded 	bl	800099c <__aeabi_d2f>
 8000dc2:	ee07 0a10 	vmov	s14, r0
 8000dc6:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8000eb8 <Dev_Gas_Gauge_Get_Battery_Data+0x220>
 8000dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dce:	ee17 0a90 	vmov	r0, s15
 8000dd2:	f7ff fb79 	bl	80004c8 <__aeabi_f2d>
 8000dd6:	a330      	add	r3, pc, #192	; (adr r3, 8000e98 <Dev_Gas_Gauge_Get_Battery_Data+0x200>)
 8000dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ddc:	f7ff fa14 	bl	8000208 <__aeabi_dsub>
 8000de0:	4603      	mov	r3, r0
 8000de2:	460c      	mov	r4, r1
 8000de4:	461a      	mov	r2, r3
 8000de6:	4623      	mov	r3, r4
 8000de8:	79fc      	ldrb	r4, [r7, #7]
 8000dea:	4610      	mov	r0, r2
 8000dec:	4619      	mov	r1, r3
 8000dee:	f7ff fdd5 	bl	800099c <__aeabi_d2f>
 8000df2:	4601      	mov	r1, r0
 8000df4:	4a2d      	ldr	r2, [pc, #180]	; (8000eac <Dev_Gas_Gauge_Get_Battery_Data+0x214>)
 8000df6:	4623      	mov	r3, r4
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4423      	add	r3, r4
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	330c      	adds	r3, #12
 8000e02:	6019      	str	r1, [r3, #0]

		Temp = (DEV_GASG_DataBuffer[DEV_GASG_Accumulated_Charge_MSB] << 8) | DEV_GASG_DataBuffer[DEV_GASG_Accumulated_Charge_LSB];
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <Dev_Gas_Gauge_Get_Battery_Data+0x208>)
 8000e06:	789b      	ldrb	r3, [r3, #2]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <Dev_Gas_Gauge_Get_Battery_Data+0x208>)
 8000e0e:	78db      	ldrb	r3, [r3, #3]
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	81fb      	strh	r3, [r7, #14]
		GASG_Updated_Data[ID].ACC_Charge = GASG_Updated_Data[ID].Qlsb * Temp;
 8000e18:	79fa      	ldrb	r2, [r7, #7]
 8000e1a:	4924      	ldr	r1, [pc, #144]	; (8000eac <Dev_Gas_Gauge_Get_Battery_Data+0x214>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	440b      	add	r3, r1
 8000e26:	3310      	adds	r3, #16
 8000e28:	ed93 7a00 	vldr	s14, [r3]
 8000e2c:	89fb      	ldrh	r3, [r7, #14]
 8000e2e:	ee07 3a90 	vmov	s15, r3
 8000e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e3c:	491b      	ldr	r1, [pc, #108]	; (8000eac <Dev_Gas_Gauge_Get_Battery_Data+0x214>)
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	edc3 7a00 	vstr	s15, [r3]


		if(Batt_Data != NULL)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d010      	beq.n	8000e74 <Dev_Gas_Gauge_Get_Battery_Data+0x1dc>
			memcpy(Batt_Data, &GASG_Updated_Data[ID], sizeof(GAS_Gauge_Data_t));
 8000e52:	79fa      	ldrb	r2, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4a13      	ldr	r2, [pc, #76]	; (8000eac <Dev_Gas_Gauge_Get_Battery_Data+0x214>)
 8000e5e:	4413      	add	r3, r2
 8000e60:	2214      	movs	r2, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	6838      	ldr	r0, [r7, #0]
 8000e66:	f003 f863 	bl	8003f30 <memcpy>
		else
			goto label_return_error;

		goto label_return_answered_request;
 8000e6a:	bf00      	nop
		goto label_return_error;
	}


	label_return_answered_request:
	return ANSWERED_REQUEST;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	e004      	b.n	8000e7a <Dev_Gas_Gauge_Get_Battery_Data+0x1e2>
		goto label_return_error;
 8000e70:	bf00      	nop
 8000e72:	e000      	b.n	8000e76 <Dev_Gas_Gauge_Get_Battery_Data+0x1de>
			goto label_return_error;
 8000e74:	bf00      	nop
	label_return_error:
	return ERR_DEVICE;
 8000e76:	f248 039b 	movw	r3, #32923	; 0x809b
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	ecbd 8b02 	vpop	{d8}
 8000e84:	bd90      	pop	{r4, r7, pc}
 8000e86:	bf00      	nop
 8000e88:	00000000 	.word	0x00000000
 8000e8c:	40efffe0 	.word	0x40efffe0
 8000e90:	00000000 	.word	0x00000000
 8000e94:	40dfffc0 	.word	0x40dfffc0
 8000e98:	66666666 	.word	0x66666666
 8000e9c:	40711266 	.word	0x40711266
 8000ea0:	20000118 	.word	0x20000118
 8000ea4:	2000005c 	.word	0x2000005c
 8000ea8:	428d999a 	.word	0x428d999a
 8000eac:	200000c8 	.word	0x200000c8
 8000eb0:	200000a8 	.word	0x200000a8
 8000eb4:	3d83126f 	.word	0x3d83126f
 8000eb8:	43ff0000 	.word	0x43ff0000

08000ebc <Dev_Gas_Gauge_Manual_Convert>:

	return ReturnValue;
}

ReturnCode_t Dev_Gas_Gauge_Manual_Convert( uint8_t  ID )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af04      	add	r7, sp, #16
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	uint8_t	Control_Register_Value[2];
	uint8_t Retry_Counter = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]

	Control_Register_Value[0]  = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	733b      	strb	r3, [r7, #12]
	Control_Register_Value[0] |= 0x01 << 6;
 8000ece:	7b3b      	ldrb	r3, [r7, #12]
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	733b      	strb	r3, [r7, #12]
	Control_Register_Value[0] |= Configuration_Parameters_Array[ID].Prescaler_Factor << 3;
 8000ed8:	7b3b      	ldrb	r3, [r7, #12]
 8000eda:	b25a      	sxtb	r2, r3
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	492b      	ldr	r1, [pc, #172]	; (8000f8c <Dev_Gas_Gauge_Manual_Convert+0xd0>)
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	733b      	strb	r3, [r7, #12]
	Control_Register_Value[0] |= Configuration_Parameters_Array[ID].Alert_Pin_Mode << 1;
 8000ef2:	7b3b      	ldrb	r3, [r7, #12]
 8000ef4:	b25a      	sxtb	r2, r3
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	4924      	ldr	r1, [pc, #144]	; (8000f8c <Dev_Gas_Gauge_Manual_Convert+0xd0>)
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	733b      	strb	r3, [r7, #12]
	//Control_Register_Value[0] |= 1;

	if(HAL_I2C_Mem_Write(&DEV_GAS_GAUGE_IIC_HANDLER, DEV_GASG_I2C_ADDRESS, DEV_GASG_Control, I2C_MEMADD_SIZE_8BIT, Control_Register_Value, 1, 50) == HAL_OK)
 8000f0c:	2332      	movs	r3, #50	; 0x32
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2301      	movs	r3, #1
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	21c8      	movs	r1, #200	; 0xc8
 8000f20:	481b      	ldr	r0, [pc, #108]	; (8000f90 <Dev_Gas_Gauge_Manual_Convert+0xd4>)
 8000f22:	f000 fe95 	bl	8001c50 <HAL_I2C_Mem_Write>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d124      	bne.n	8000f76 <Dev_Gas_Gauge_Manual_Convert+0xba>
	{
		do
		{
			HAL_Delay(50); // vTaskDelay( DEV_GASG_MANUAL_CONVERTION_OSDELAY / portTICK_PERIOD_MS );
 8000f2c:	2032      	movs	r0, #50	; 0x32
 8000f2e:	f000 fb65 	bl	80015fc <HAL_Delay>
			if(HAL_I2C_Mem_Read(&DEV_GAS_GAUGE_IIC_HANDLER, DEV_GASG_I2C_ADDRESS, DEV_GASG_Control, I2C_MEMADD_SIZE_8BIT, Control_Register_Value, 1, 50) == HAL_OK)
 8000f32:	2332      	movs	r3, #50	; 0x32
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	2301      	movs	r3, #1
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	2201      	movs	r2, #1
 8000f44:	21c8      	movs	r1, #200	; 0xc8
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <Dev_Gas_Gauge_Manual_Convert+0xd4>)
 8000f48:	f000 ff96 	bl	8001e78 <HAL_I2C_Mem_Read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d113      	bne.n	8000f7a <Dev_Gas_Gauge_Manual_Convert+0xbe>
			{
				if(!(Control_Register_Value[0] & 0xC0)) // Conversao completa!
 8000f52:	7b3b      	ldrb	r3, [r7, #12]
 8000f54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d009      	beq.n	8000f70 <Dev_Gas_Gauge_Manual_Convert+0xb4>
			}
			else
			{
				goto label_return_error;
			}
			Retry_Counter ++;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
		}while(Retry_Counter > DEV_GASG_MAX_MANUAL_CONVERTION_RETRY);
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d8e1      	bhi.n	8000f2c <Dev_Gas_Gauge_Manual_Convert+0x70>

		if( Retry_Counter >= DEV_GASG_MAX_MANUAL_CONVERTION_RETRY )
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d807      	bhi.n	8000f7e <Dev_Gas_Gauge_Manual_Convert+0xc2>
 8000f6e:	e000      	b.n	8000f72 <Dev_Gas_Gauge_Manual_Convert+0xb6>
					goto label_return_answered_request;
 8000f70:	bf00      	nop
	{
		goto label_return_error;
	}

	label_return_answered_request:
	return ANSWERED_REQUEST;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e006      	b.n	8000f84 <Dev_Gas_Gauge_Manual_Convert+0xc8>
		goto label_return_error;
 8000f76:	bf00      	nop
 8000f78:	e002      	b.n	8000f80 <Dev_Gas_Gauge_Manual_Convert+0xc4>
				goto label_return_error;
 8000f7a:	bf00      	nop
 8000f7c:	e000      	b.n	8000f80 <Dev_Gas_Gauge_Manual_Convert+0xc4>
			goto label_return_error;
 8000f7e:	bf00      	nop
	label_return_error:
	return ERR_DEVICE;
 8000f80:	f248 039b 	movw	r3, #32923	; 0x809b
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200000a8 	.word	0x200000a8
 8000f90:	2000005c 	.word	0x2000005c

08000f94 <Dev_Gas_Gauge_Set_Battery_Capacity>:

ReturnCode_t Dev_Gas_Gauge_Set_Battery_Capacity( uint8_t  ID , float Battery_Capacity)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	ed87 0a00 	vstr	s0, [r7]
 8000fa0:	71fb      	strb	r3, [r7, #7]
	uint16_t Capacity_Value_u16;
	uint8_t Capacity_Bytes_u8[2];
	float Capacity_Value_Float;

	if(GASG_Updated_Data[ID].Qlsb > 0)
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	4928      	ldr	r1, [pc, #160]	; (8001048 <Dev_Gas_Gauge_Set_Battery_Capacity+0xb4>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	3310      	adds	r3, #16
 8000fb2:	edd3 7a00 	vldr	s15, [r3]
 8000fb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	dc00      	bgt.n	8000fc2 <Dev_Gas_Gauge_Set_Battery_Capacity+0x2e>
		else
			goto label_return_error;
	}
	else
	{
		goto label_return_error;
 8000fc0:	e03c      	b.n	800103c <Dev_Gas_Gauge_Set_Battery_Capacity+0xa8>
		Capacity_Value_Float = Battery_Capacity / GASG_Updated_Data[ID].Qlsb;
 8000fc2:	79fa      	ldrb	r2, [r7, #7]
 8000fc4:	4920      	ldr	r1, [pc, #128]	; (8001048 <Dev_Gas_Gauge_Set_Battery_Capacity+0xb4>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	3310      	adds	r3, #16
 8000fd2:	ed93 7a00 	vldr	s14, [r3]
 8000fd6:	edd7 6a00 	vldr	s13, [r7]
 8000fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fde:	edc7 7a03 	vstr	s15, [r7, #12]
		if(Capacity_Value_Float < 65535.0)
 8000fe2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fe6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800104c <Dev_Gas_Gauge_Set_Battery_Capacity+0xb8>
 8000fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d400      	bmi.n	8000ff6 <Dev_Gas_Gauge_Set_Battery_Capacity+0x62>
			goto label_return_error;
 8000ff4:	e022      	b.n	800103c <Dev_Gas_Gauge_Set_Battery_Capacity+0xa8>
			Capacity_Value_u16 = (uint16_t)Capacity_Value_Float;
 8000ff6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ffe:	ee17 3a90 	vmov	r3, s15
 8001002:	817b      	strh	r3, [r7, #10]
			Capacity_Bytes_u8[0] = Capacity_Value_u16 >> 8;
 8001004:	897b      	ldrh	r3, [r7, #10]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	b29b      	uxth	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	723b      	strb	r3, [r7, #8]
			Capacity_Bytes_u8[1] = Capacity_Value_u16 & 0xFF;
 800100e:	897b      	ldrh	r3, [r7, #10]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	727b      	strb	r3, [r7, #9]
		if(HAL_I2C_Mem_Write(&DEV_GAS_GAUGE_IIC_HANDLER, DEV_GASG_I2C_ADDRESS, DEV_GASG_Accumulated_Charge_MSB, I2C_MEMADD_SIZE_8BIT, Capacity_Bytes_u8, 2, 50) == HAL_OK)
 8001014:	2332      	movs	r3, #50	; 0x32
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2302      	movs	r3, #2
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	2202      	movs	r2, #2
 8001026:	21c8      	movs	r1, #200	; 0xc8
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <Dev_Gas_Gauge_Set_Battery_Capacity+0xbc>)
 800102a:	f000 fe11 	bl	8001c50 <HAL_I2C_Mem_Write>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <Dev_Gas_Gauge_Set_Battery_Capacity+0xa6>
			goto label_return_answered_request;
 8001034:	bf00      	nop
	}

	label_return_answered_request:
	return ANSWERED_REQUEST;
 8001036:	2300      	movs	r3, #0
 8001038:	e002      	b.n	8001040 <Dev_Gas_Gauge_Set_Battery_Capacity+0xac>
			goto label_return_error;
 800103a:	bf00      	nop
	label_return_error:
	return ERR_DEVICE;
 800103c:	f248 039b 	movw	r3, #32923	; 0x809b
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000c8 	.word	0x200000c8
 800104c:	477fff00 	.word	0x477fff00
 8001050:	2000005c 	.word	0x2000005c

08001054 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_GPIO_Init+0x2c>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <MX_GPIO_Init+0x2c>)
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_GPIO_Init+0x2c>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a17      	ldr	r2, [pc, #92]	; (8001100 <HAL_I2C_MspInit+0x7c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d127      	bne.n	80010f6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_I2C_MspInit+0x80>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a16      	ldr	r2, [pc, #88]	; (8001104 <HAL_I2C_MspInit+0x80>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_I2C_MspInit+0x80>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010be:	2303      	movs	r3, #3
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c2:	2312      	movs	r3, #18
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010ce:	2304      	movs	r3, #4
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <HAL_I2C_MspInit+0x84>)
 80010da:	f000 fb97 	bl	800180c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_I2C_MspInit+0x80>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_I2C_MspInit+0x80>)
 80010e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_I2C_MspInit+0x80>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	; 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40005800 	.word	0x40005800
 8001104:	40021000 	.word	0x40021000
 8001108:	48001400 	.word	0x48001400
 800110c:	00000000 	.word	0x00000000

08001110 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	static enum { STEP_START_MANUAL_CONVERTION, STEP_CAPTURE_DATA, STEP_SLEEP, STEP_FAULT } GAS_GAUGE_STATE_MACHINE = STEP_START_MANUAL_CONVERTION;
	Dev_Gas_Gauge_Configuration_t Config_Parameters = {
 8001116:	4a5c      	ldr	r2, [pc, #368]	; (8001288 <main+0x178>)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111e:	e883 0003 	stmia.w	r3, {r0, r1}
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001122:	f000 f9f6 	bl	8001512 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001126:	f000 f8c5 	bl	80012b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800112a:	f7ff ff93 	bl	8001054 <MX_GPIO_Init>
	//MX_I2C2_Init();
	/* USER CODE BEGIN 2 */
	Dev_Gas_Gauge_IntHwInit( 0 );
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fc84 	bl	8000a3c <Dev_Gas_Gauge_IntHwInit>

	Dev_Gas_Gauge_ExtDevConfig( 0, Config_Parameters);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	e893 0006 	ldmia.w	r3, {r1, r2}
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff fcf4 	bl	8000b28 <Dev_Gas_Gauge_ExtDevConfig>
	ReadQnt = TimeSimulation/(50+ConvDelay);
 8001140:	4b52      	ldr	r3, [pc, #328]	; (800128c <main+0x17c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b52      	ldr	r3, [pc, #328]	; (8001290 <main+0x180>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3332      	adds	r3, #50	; 0x32
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4a51      	ldr	r2, [pc, #324]	; (8001294 <main+0x184>)
 8001150:	6013      	str	r3, [r2, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	Dev_Gas_Gauge_Set_Battery_Capacity(0, 0);
 8001152:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001298 <main+0x188>
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ff1c 	bl	8000f94 <Dev_Gas_Gauge_Set_Battery_Capacity>

	uint32_t st = HAL_GetTick();
 800115c:	f000 fa42 	bl	80015e4 <HAL_GetTick>
 8001160:	60f8      	str	r0, [r7, #12]


	while (1)
	{

		if(HAL_GetTick() - st >=TimeSimulation)
 8001162:	f000 fa3f 	bl	80015e4 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	4b47      	ldr	r3, [pc, #284]	; (800128c <main+0x17c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d301      	bcc.n	8001178 <main+0x68>
			st = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]


		switch( GAS_GAUGE_STATE_MACHINE )
 8001178:	4b48      	ldr	r3, [pc, #288]	; (800129c <main+0x18c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b03      	cmp	r3, #3
 800117e:	d8f0      	bhi.n	8001162 <main+0x52>
 8001180:	a201      	add	r2, pc, #4	; (adr r2, 8001188 <main+0x78>)
 8001182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	08001199 	.word	0x08001199
 800118c:	080011b5 	.word	0x080011b5
 8001190:	08001253 	.word	0x08001253
 8001194:	08001163 	.word	0x08001163
		{
		case STEP_START_MANUAL_CONVERTION:
			if( Dev_Gas_Gauge_Manual_Convert(0) == ANSWERED_REQUEST ) // Inicia a conversão ADC manual. Leva Aproximadamente 50ms
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fe8f 	bl	8000ebc <Dev_Gas_Gauge_Manual_Convert>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d103      	bne.n	80011ac <main+0x9c>
				GAS_GAUGE_STATE_MACHINE = STEP_CAPTURE_DATA;
 80011a4:	4b3d      	ldr	r3, [pc, #244]	; (800129c <main+0x18c>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
				 * Possibilidade 1: E Provavel que o dispositivo nao foi encontrado na rede ( Desconectado?!?! )
				 * Possibilidade 2: Ultrapassou o DEV_GASG_MAX_MANUAL_CONVERTION_RETRY (Maximo de tentativas)
				 *
				 */
			}
			break;
 80011aa:	e061      	b.n	8001270 <main+0x160>
				GAS_GAUGE_STATE_MACHINE = STEP_FAULT;
 80011ac:	4b3b      	ldr	r3, [pc, #236]	; (800129c <main+0x18c>)
 80011ae:	2203      	movs	r2, #3
 80011b0:	701a      	strb	r2, [r3, #0]
			break;
 80011b2:	e05d      	b.n	8001270 <main+0x160>
		case STEP_CAPTURE_DATA:
			if( Dev_Gas_Gauge_Get_Battery_Data( 0, &Batt_Data) == ANSWERED_REQUEST ) // Captura os dados convertidos
 80011b4:	493a      	ldr	r1, [pc, #232]	; (80012a0 <main+0x190>)
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fd6e 	bl	8000c98 <Dev_Gas_Gauge_Get_Battery_Data>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d143      	bne.n	800124a <main+0x13a>
			{
				GAS_GAUGE_STATE_MACHINE = STEP_SLEEP;
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <main+0x18c>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	701a      	strb	r2, [r3, #0]

				CurrentFiltered = CurrentFiltered*0.8 + Batt_Data.Current*0.2;
 80011c8:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <main+0x194>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f97b 	bl	80004c8 <__aeabi_f2d>
 80011d2:	a329      	add	r3, pc, #164	; (adr r3, 8001278 <main+0x168>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff f9ce 	bl	8000578 <__aeabi_dmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	4625      	mov	r5, r4
 80011e2:	461c      	mov	r4, r3
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <main+0x190>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f96d 	bl	80004c8 <__aeabi_f2d>
 80011ee:	a324      	add	r3, pc, #144	; (adr r3, 8001280 <main+0x170>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff f9c0 	bl	8000578 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4620      	mov	r0, r4
 80011fe:	4629      	mov	r1, r5
 8001200:	f7ff f804 	bl	800020c <__adddf3>
 8001204:	4603      	mov	r3, r0
 8001206:	460c      	mov	r4, r1
 8001208:	4618      	mov	r0, r3
 800120a:	4621      	mov	r1, r4
 800120c:	f7ff fbc6 	bl	800099c <__aeabi_d2f>
 8001210:	4602      	mov	r2, r0
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <main+0x194>)
 8001214:	601a      	str	r2, [r3, #0]
                                                                                                       //(W)*(s) = joule
				JouleEnergy = Batt_Data.ACC_Charge*3600*Batt_Data.Voltage; // conversao mAh -> j ( (A)*U *(3600) -> W*s  )
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <main+0x190>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80012a8 <main+0x198>
 8001220:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <main+0x190>)
 8001226:	edd3 7a01 	vldr	s15, [r3, #4]
 800122a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <main+0x19c>)
 8001230:	edc3 7a00 	vstr	s15, [r3]

				if( ReadCounter >=  ReadQnt)
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <main+0x1a0>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <main+0x184>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d316      	bcc.n	800126e <main+0x15e>
				{
					JouleEnergy = 0;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <main+0x19c>)
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
				 * Possibilidade 1: E Provavel que o dispositivo nao foi encontrado na rede ( Desconectado?!?! )
				 * Possibilidade 2: Ponteiro de saida dos dados e NULL???
				 *
				 */
			}
			break;
 8001248:	e011      	b.n	800126e <main+0x15e>
				GAS_GAUGE_STATE_MACHINE = STEP_FAULT;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <main+0x18c>)
 800124c:	2203      	movs	r2, #3
 800124e:	701a      	strb	r2, [r3, #0]
			break;
 8001250:	e00d      	b.n	800126e <main+0x15e>
		case STEP_SLEEP:
			HAL_Delay(ConvDelay); // Aguarda nova conversão
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <main+0x180>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f9d0 	bl	80015fc <HAL_Delay>
			GAS_GAUGE_STATE_MACHINE = STEP_START_MANUAL_CONVERTION;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <main+0x18c>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
			ReadCounter++;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <main+0x1a0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <main+0x1a0>)
 800126a:	6013      	str	r3, [r2, #0]


			break;
 800126c:	e000      	b.n	8001270 <main+0x160>
			break;
 800126e:	bf00      	nop
		if(HAL_GetTick() - st >=TimeSimulation)
 8001270:	e777      	b.n	8001162 <main+0x52>
 8001272:	bf00      	nop
 8001274:	f3af 8000 	nop.w
 8001278:	9999999a 	.word	0x9999999a
 800127c:	3fe99999 	.word	0x3fe99999
 8001280:	9999999a 	.word	0x9999999a
 8001284:	3fc99999 	.word	0x3fc99999
 8001288:	08003f70 	.word	0x08003f70
 800128c:	2000001c 	.word	0x2000001c
 8001290:	20000020 	.word	0x20000020
 8001294:	20000144 	.word	0x20000144
 8001298:	00000000 	.word	0x00000000
 800129c:	20000058 	.word	0x20000058
 80012a0:	20000130 	.word	0x20000130
 80012a4:	2000004c 	.word	0x2000004c
 80012a8:	45610000 	.word	0x45610000
 80012ac:	20000050 	.word	0x20000050
 80012b0:	20000054 	.word	0x20000054

080012b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0bc      	sub	sp, #240	; 0xf0
 80012b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012be:	2244      	movs	r2, #68	; 0x44
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fe3f 	bl	8003f46 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2294      	movs	r2, #148	; 0x94
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fe31 	bl	8003f46 <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80012e4:	2000      	movs	r0, #0
 80012e6:	f001 f9b5 	bl	8002654 <HAL_PWREx_ControlVoltageScaling>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x40>
	{
		Error_Handler();
 80012f0:	f000 f856 	bl	80013a0 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012f4:	2310      	movs	r3, #16
 80012f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001306:	2360      	movs	r3, #96	; 0x60
 8001308:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001312:	2301      	movs	r3, #1
 8001314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLN = 60;
 800131e:	233c      	movs	r3, #60	; 0x3c
 8001320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001330:	2302      	movs	r3, #2
 8001332:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001336:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800133a:	4618      	mov	r0, r3
 800133c:	f001 fa2e 	bl	800279c <HAL_RCC_OscConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001346:	f000 f82b 	bl	80013a0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001350:	2303      	movs	r3, #3
 8001352:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001368:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800136c:	2105      	movs	r1, #5
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fe3a 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xca>
	{
		Error_Handler();
 800137a:	f000 f811 	bl	80013a0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	607b      	str	r3, [r7, #4]
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001382:	2300      	movs	r3, #0
 8001384:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4618      	mov	r0, r3
 800138a:	f002 f8a5 	bl	80034d8 <HAL_RCCEx_PeriphCLKConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8001394:	f000 f804 	bl	80013a0 <Error_Handler>
	}
}
 8001398:	bf00      	nop
 800139a:	37f0      	adds	r7, #240	; 0xf0
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x44>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_MspInit+0x44>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_MspInit+0x44>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 f8b6 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <SystemInit+0x64>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <SystemInit+0x64>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <SystemInit+0x68>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <SystemInit+0x68>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <SystemInit+0x68>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <SystemInit+0x68>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <SystemInit+0x68>)
 8001480:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001484:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001488:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <SystemInit+0x68>)
 800148c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001490:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <SystemInit+0x68>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <SystemInit+0x68>)
 8001498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <SystemInit+0x68>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SystemInit+0x64>)
 80014a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014aa:	609a      	str	r2, [r3, #8]
#endif
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	40021000 	.word	0x40021000

080014c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014c4:	f7ff ffc6 	bl	8001454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014ca:	e003      	b.n	80014d4 <LoopCopyDataInit>

080014cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014d2:	3104      	adds	r1, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014d4:	480a      	ldr	r0, [pc, #40]	; (8001500 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014dc:	d3f6      	bcc.n	80014cc <CopyDataInit>
	ldr	r2, =_sbss
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014e0:	e002      	b.n	80014e8 <LoopFillZerobss>

080014e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014e4:	f842 3b04 	str.w	r3, [r2], #4

080014e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <LoopForever+0x16>)
	cmp	r2, r3
 80014ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014ec:	d3f9      	bcc.n	80014e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ee:	f002 fcfb 	bl	8003ee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014f2:	f7ff fe0d 	bl	8001110 <main>

080014f6 <LoopForever>:

LoopForever:
    b LoopForever
 80014f6:	e7fe      	b.n	80014f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014f8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80014fc:	08003fc0 	.word	0x08003fc0
	ldr	r0, =_sdata
 8001500:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001504:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 8001508:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 800150c:	2000014c 	.word	0x2000014c

08001510 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC1_IRQHandler>

08001512 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f941 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f80e 	bl	8001544 <HAL_InitTick>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	71fb      	strb	r3, [r7, #7]
 8001532:	e001      	b.n	8001538 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001534:	f7ff ff3c 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001538:	79fb      	ldrb	r3, [r7, #7]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_InitTick+0x6c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d023      	beq.n	80015a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_InitTick+0x70>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_InitTick+0x6c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001566:	fbb3 f3f1 	udiv	r3, r3, r1
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f93f 	bl	80017f2 <HAL_SYSTICK_Config>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10f      	bne.n	800159a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d809      	bhi.n	8001594 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f917 	bl	80017ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_InitTick+0x74>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e007      	b.n	80015a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e004      	b.n	80015a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	e001      	b.n	80015a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000002c 	.word	0x2000002c
 80015b4:	20000024 	.word	0x20000024
 80015b8:	20000028 	.word	0x20000028

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2000002c 	.word	0x2000002c
 80015e0:	20000148 	.word	0x20000148

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000148 	.word	0x20000148

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_Delay+0x40>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffde 	bl	80015e4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000002c 	.word	0x2000002c

08001640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff47 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff5c 	bl	8001688 <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff8e 	bl	80016f8 <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5d 	bl	80016a4 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffb0 	bl	8001760 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181a:	e166      	b.n	8001aea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2101      	movs	r1, #1
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8158 	beq.w	8001ae4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d00b      	beq.n	8001854 <HAL_GPIO_Init+0x48>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001848:	2b11      	cmp	r3, #17
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b12      	cmp	r3, #18
 8001852:	d130      	bne.n	80018b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800188a:	2201      	movs	r2, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	f003 0201 	and.w	r2, r3, #1
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0xea>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d123      	bne.n	800193e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	08da      	lsrs	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	6939      	ldr	r1, [r7, #16]
 800193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0203 	and.w	r2, r3, #3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80b2 	beq.w	8001ae4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001980:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <HAL_GPIO_Init+0x2fc>)
 8001982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001984:	4a60      	ldr	r2, [pc, #384]	; (8001b08 <HAL_GPIO_Init+0x2fc>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6613      	str	r3, [r2, #96]	; 0x60
 800198c:	4b5e      	ldr	r3, [pc, #376]	; (8001b08 <HAL_GPIO_Init+0x2fc>)
 800198e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001998:	4a5c      	ldr	r2, [pc, #368]	; (8001b0c <HAL_GPIO_Init+0x300>)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019c2:	d02b      	beq.n	8001a1c <HAL_GPIO_Init+0x210>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_GPIO_Init+0x304>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d025      	beq.n	8001a18 <HAL_GPIO_Init+0x20c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <HAL_GPIO_Init+0x308>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d01f      	beq.n	8001a14 <HAL_GPIO_Init+0x208>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a50      	ldr	r2, [pc, #320]	; (8001b18 <HAL_GPIO_Init+0x30c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d019      	beq.n	8001a10 <HAL_GPIO_Init+0x204>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <HAL_GPIO_Init+0x310>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d013      	beq.n	8001a0c <HAL_GPIO_Init+0x200>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a4e      	ldr	r2, [pc, #312]	; (8001b20 <HAL_GPIO_Init+0x314>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00d      	beq.n	8001a08 <HAL_GPIO_Init+0x1fc>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a4d      	ldr	r2, [pc, #308]	; (8001b24 <HAL_GPIO_Init+0x318>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d007      	beq.n	8001a04 <HAL_GPIO_Init+0x1f8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a4c      	ldr	r2, [pc, #304]	; (8001b28 <HAL_GPIO_Init+0x31c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_GPIO_Init+0x1f4>
 80019fc:	2307      	movs	r3, #7
 80019fe:	e00e      	b.n	8001a1e <HAL_GPIO_Init+0x212>
 8001a00:	2308      	movs	r3, #8
 8001a02:	e00c      	b.n	8001a1e <HAL_GPIO_Init+0x212>
 8001a04:	2306      	movs	r3, #6
 8001a06:	e00a      	b.n	8001a1e <HAL_GPIO_Init+0x212>
 8001a08:	2305      	movs	r3, #5
 8001a0a:	e008      	b.n	8001a1e <HAL_GPIO_Init+0x212>
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	e006      	b.n	8001a1e <HAL_GPIO_Init+0x212>
 8001a10:	2303      	movs	r3, #3
 8001a12:	e004      	b.n	8001a1e <HAL_GPIO_Init+0x212>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e002      	b.n	8001a1e <HAL_GPIO_Init+0x212>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_GPIO_Init+0x212>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	f002 0203 	and.w	r2, r2, #3
 8001a24:	0092      	lsls	r2, r2, #2
 8001a26:	4093      	lsls	r3, r2
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a2e:	4937      	ldr	r1, [pc, #220]	; (8001b0c <HAL_GPIO_Init+0x300>)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_GPIO_Init+0x320>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a60:	4a32      	ldr	r2, [pc, #200]	; (8001b2c <HAL_GPIO_Init+0x320>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_GPIO_Init+0x320>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a8a:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <HAL_GPIO_Init+0x320>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a90:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <HAL_GPIO_Init+0x320>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <HAL_GPIO_Init+0x320>)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_GPIO_Init+0x320>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ade:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <HAL_GPIO_Init+0x320>)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f47f ae91 	bne.w	800181c <HAL_GPIO_Init+0x10>
  }
}
 8001afa:	bf00      	nop
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	48000400 	.word	0x48000400
 8001b14:	48000800 	.word	0x48000800
 8001b18:	48000c00 	.word	0x48000c00
 8001b1c:	48001000 	.word	0x48001000
 8001b20:	48001400 	.word	0x48001400
 8001b24:	48001800 	.word	0x48001800
 8001b28:	48001c00 	.word	0x48001c00
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e081      	b.n	8001c46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fa94 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2224      	movs	r2, #36	; 0x24
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	e006      	b.n	8001bb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d104      	bne.n	8001bca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	ea42 0103 	orr.w	r1, r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	021a      	lsls	r2, r3, #8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69d9      	ldr	r1, [r3, #28]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1a      	ldr	r2, [r3, #32]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	817b      	strh	r3, [r7, #10]
 8001c62:	460b      	mov	r3, r1
 8001c64:	813b      	strh	r3, [r7, #8]
 8001c66:	4613      	mov	r3, r2
 8001c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	f040 80f9 	bne.w	8001e6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_I2C_Mem_Write+0x34>
 8001c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0ed      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_I2C_Mem_Write+0x4e>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e0e6      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ca6:	f7ff fc9d 	bl	80015e4 <HAL_GetTick>
 8001caa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2319      	movs	r3, #25
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 fac3 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0d1      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2221      	movs	r2, #33	; 0x21
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a3a      	ldr	r2, [r7, #32]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cf0:	88f8      	ldrh	r0, [r7, #6]
 8001cf2:	893a      	ldrh	r2, [r7, #8]
 8001cf4:	8979      	ldrh	r1, [r7, #10]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4603      	mov	r3, r0
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f9d3 	bl	80020ac <I2C_RequestMemoryWrite>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0a9      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2bff      	cmp	r3, #255	; 0xff
 8001d20:	d90e      	bls.n	8001d40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	22ff      	movs	r2, #255	; 0xff
 8001d26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fba5 	bl	8002488 <I2C_TransferConfig>
 8001d3e:	e00f      	b.n	8001d60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	8979      	ldrh	r1, [r7, #10]
 8001d52:	2300      	movs	r3, #0
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 fb94 	bl	8002488 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 faad 	bl	80022c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e07b      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d034      	beq.n	8001e18 <HAL_I2C_Mem_Write+0x1c8>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d130      	bne.n	8001e18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fa3f 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e04d      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d90e      	bls.n	8001df8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	22ff      	movs	r2, #255	; 0xff
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8979      	ldrh	r1, [r7, #10]
 8001de8:	2300      	movs	r3, #0
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fb49 	bl	8002488 <I2C_TransferConfig>
 8001df6:	e00f      	b.n	8001e18 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	8979      	ldrh	r1, [r7, #10]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 fb38 	bl	8002488 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d19e      	bne.n	8001d60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 fa8c 	bl	8002344 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e01a      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_I2C_Mem_Write+0x224>)
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e6a:	2302      	movs	r3, #2
  }
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	fe00e800 	.word	0xfe00e800

08001e78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	4608      	mov	r0, r1
 8001e82:	4611      	mov	r1, r2
 8001e84:	461a      	mov	r2, r3
 8001e86:	4603      	mov	r3, r0
 8001e88:	817b      	strh	r3, [r7, #10]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	813b      	strh	r3, [r7, #8]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	f040 80fd 	bne.w	800209a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_I2C_Mem_Read+0x34>
 8001ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0f1      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2C_Mem_Read+0x4e>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e0ea      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ece:	f7ff fb89 	bl	80015e4 <HAL_GetTick>
 8001ed2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2319      	movs	r3, #25
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f9af 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0d5      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2222      	movs	r2, #34	; 0x22
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2240      	movs	r2, #64	; 0x40
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a3a      	ldr	r2, [r7, #32]
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f18:	88f8      	ldrh	r0, [r7, #6]
 8001f1a:	893a      	ldrh	r2, [r7, #8]
 8001f1c:	8979      	ldrh	r1, [r7, #10]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	4603      	mov	r3, r0
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f913 	bl	8002154 <I2C_RequestMemoryRead>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0ad      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d90e      	bls.n	8001f68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	22ff      	movs	r2, #255	; 0xff
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	8979      	ldrh	r1, [r7, #10]
 8001f58:	4b52      	ldr	r3, [pc, #328]	; (80020a4 <HAL_I2C_Mem_Read+0x22c>)
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 fa91 	bl	8002488 <I2C_TransferConfig>
 8001f66:	e00f      	b.n	8001f88 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_I2C_Mem_Read+0x22c>)
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fa80 	bl	8002488 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2104      	movs	r1, #4
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f956 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e07c      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d034      	beq.n	8002048 <HAL_I2C_Mem_Read+0x1d0>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d130      	bne.n	8002048 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	2200      	movs	r2, #0
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f927 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e04d      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	2bff      	cmp	r3, #255	; 0xff
 8002008:	d90e      	bls.n	8002028 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	22ff      	movs	r2, #255	; 0xff
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	b2da      	uxtb	r2, r3
 8002016:	8979      	ldrh	r1, [r7, #10]
 8002018:	2300      	movs	r3, #0
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fa31 	bl	8002488 <I2C_TransferConfig>
 8002026:	e00f      	b.n	8002048 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002036:	b2da      	uxtb	r2, r3
 8002038:	8979      	ldrh	r1, [r7, #10]
 800203a:	2300      	movs	r3, #0
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fa20 	bl	8002488 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d19a      	bne.n	8001f88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f974 	bl	8002344 <I2C_WaitOnSTOPFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e01a      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2220      	movs	r2, #32
 800206c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_I2C_Mem_Read+0x230>)
 800207a:	400b      	ands	r3, r1
 800207c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800209a:	2302      	movs	r3, #2
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	80002400 	.word	0x80002400
 80020a8:	fe00e800 	.word	0xfe00e800

080020ac <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	817b      	strh	r3, [r7, #10]
 80020be:	460b      	mov	r3, r1
 80020c0:	813b      	strh	r3, [r7, #8]
 80020c2:	4613      	mov	r3, r2
 80020c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	8979      	ldrh	r1, [r7, #10]
 80020cc:	4b20      	ldr	r3, [pc, #128]	; (8002150 <I2C_RequestMemoryWrite+0xa4>)
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f9d7 	bl	8002488 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	69b9      	ldr	r1, [r7, #24]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f8f0 	bl	80022c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e02c      	b.n	8002148 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020f4:	893b      	ldrh	r3, [r7, #8]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28
 80020fe:	e015      	b.n	800212c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002100:	893b      	ldrh	r3, [r7, #8]
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	b29b      	uxth	r3, r3
 8002106:	b2da      	uxtb	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	69b9      	ldr	r1, [r7, #24]
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f8d6 	bl	80022c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e012      	b.n	8002148 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002122:	893b      	ldrh	r3, [r7, #8]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2200      	movs	r2, #0
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f884 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	80002000 	.word	0x80002000

08002154 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	4608      	mov	r0, r1
 800215e:	4611      	mov	r1, r2
 8002160:	461a      	mov	r2, r3
 8002162:	4603      	mov	r3, r0
 8002164:	817b      	strh	r3, [r7, #10]
 8002166:	460b      	mov	r3, r1
 8002168:	813b      	strh	r3, [r7, #8]
 800216a:	4613      	mov	r3, r2
 800216c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	8979      	ldrh	r1, [r7, #10]
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <I2C_RequestMemoryRead+0xa4>)
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2300      	movs	r3, #0
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f984 	bl	8002488 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f89d 	bl	80022c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e02c      	b.n	80021ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800219a:	893b      	ldrh	r3, [r7, #8]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
 80021a4:	e015      	b.n	80021d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021a6:	893b      	ldrh	r3, [r7, #8]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f883 	bl	80022c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e012      	b.n	80021ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021c8:	893b      	ldrh	r3, [r7, #8]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2200      	movs	r2, #0
 80021da:	2140      	movs	r1, #64	; 0x40
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f831 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	80002000 	.word	0x80002000

080021fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d103      	bne.n	800221a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d007      	beq.n	8002238 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	619a      	str	r2, [r3, #24]
  }
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002254:	e022      	b.n	800229c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d01e      	beq.n	800229c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225e:	f7ff f9c1 	bl	80015e4 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d302      	bcc.n	8002274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d113      	bne.n	800229c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002278:	f043 0220 	orr.w	r2, r3, #32
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e00f      	b.n	80022bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	4013      	ands	r3, r2
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d0cd      	beq.n	8002256 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022d0:	e02c      	b.n	800232c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f870 	bl	80023bc <I2C_IsAcknowledgeFailed>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e02a      	b.n	800233c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d01e      	beq.n	800232c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ee:	f7ff f979 	bl	80015e4 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d302      	bcc.n	8002304 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d113      	bne.n	800232c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e007      	b.n	800233c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d1cb      	bne.n	80022d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002350:	e028      	b.n	80023a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f830 	bl	80023bc <I2C_IsAcknowledgeFailed>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e026      	b.n	80023b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002366:	f7ff f93d 	bl	80015e4 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d113      	bne.n	80023a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	f043 0220 	orr.w	r2, r3, #32
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e007      	b.n	80023b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d1cf      	bne.n	8002352 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d151      	bne.n	800247a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d6:	e022      	b.n	800241e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023de:	d01e      	beq.n	800241e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e0:	f7ff f900 	bl	80015e4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d302      	bcc.n	80023f6 <I2C_IsAcknowledgeFailed+0x3a>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d113      	bne.n	800241e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f043 0220 	orr.w	r2, r3, #32
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e02e      	b.n	800247c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b20      	cmp	r3, #32
 800242a:	d1d5      	bne.n	80023d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2210      	movs	r2, #16
 8002432:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2220      	movs	r2, #32
 800243a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f7ff fedd 	bl	80021fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <I2C_IsAcknowledgeFailed+0xc8>)
 800244e:	400b      	ands	r3, r1
 8002450:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f043 0204 	orr.w	r2, r3, #4
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	fe00e800 	.word	0xfe00e800

08002488 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	817b      	strh	r3, [r7, #10]
 8002496:	4613      	mov	r3, r2
 8002498:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	0d5b      	lsrs	r3, r3, #21
 80024a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <I2C_TransferConfig+0x58>)
 80024aa:	430b      	orrs	r3, r1
 80024ac:	43db      	mvns	r3, r3
 80024ae:	ea02 0103 	and.w	r1, r2, r3
 80024b2:	897b      	ldrh	r3, [r7, #10]
 80024b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024b8:	7a7b      	ldrb	r3, [r7, #9]
 80024ba:	041b      	lsls	r3, r3, #16
 80024bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	03ff63ff 	.word	0x03ff63ff

080024e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d138      	bne.n	800256c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002504:	2302      	movs	r3, #2
 8002506:	e032      	b.n	800256e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2224      	movs	r2, #36	; 0x24
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002536:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6819      	ldr	r1, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	e000      	b.n	800256e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800256c:	2302      	movs	r3, #2
  }
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b20      	cmp	r3, #32
 800258e:	d139      	bne.n	8002604 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800259a:	2302      	movs	r3, #2
 800259c:	e033      	b.n	8002606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2224      	movs	r2, #36	; 0x24
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e000      	b.n	8002606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_PWREx_GetVoltageRange+0x3c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002624:	d102      	bne.n	800262c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800262a:	e00b      	b.n	8002644 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_PWREx_GetVoltageRange+0x3c>)
 800262e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263a:	d102      	bne.n	8002642 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800263c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002640:	e000      	b.n	8002644 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002642:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40007000 	.word	0x40007000

08002654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d141      	bne.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002662:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800266a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266e:	d131      	bne.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002670:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002676:	4a46      	ldr	r2, [pc, #280]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800267c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002680:	4b43      	ldr	r3, [pc, #268]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002688:	4a41      	ldr	r2, [pc, #260]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002690:	4b40      	ldr	r3, [pc, #256]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2232      	movs	r2, #50	; 0x32
 8002696:	fb02 f303 	mul.w	r3, r2, r3
 800269a:	4a3f      	ldr	r2, [pc, #252]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9b      	lsrs	r3, r3, #18
 80026a2:	3301      	adds	r3, #1
 80026a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026a6:	e002      	b.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ae:	4b38      	ldr	r3, [pc, #224]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	d102      	bne.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f2      	bne.n	80026a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026c2:	4b33      	ldr	r3, [pc, #204]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ce:	d158      	bne.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e057      	b.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026d4:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026da:	4a2d      	ldr	r2, [pc, #180]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026e4:	e04d      	b.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ec:	d141      	bne.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ee:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fa:	d131      	bne.n	8002760 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002702:	4a23      	ldr	r2, [pc, #140]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800270c:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002714:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800271a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2232      	movs	r2, #50	; 0x32
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	0c9b      	lsrs	r3, r3, #18
 800272e:	3301      	adds	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002732:	e002      	b.n	800273a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3b01      	subs	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002746:	d102      	bne.n	800274e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f2      	bne.n	8002734 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275a:	d112      	bne.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e011      	b.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002770:	e007      	b.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002780:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40007000 	.word	0x40007000
 8002794:	20000024 	.word	0x20000024
 8002798:	431bde83 	.word	0x431bde83

0800279c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f000 bc16 	b.w	8002fdc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b0:	4ba0      	ldr	r3, [pc, #640]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ba:	4b9e      	ldr	r3, [pc, #632]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80e4 	beq.w	800299a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4c>
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	f040 808b 	bne.w	80028f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	f040 8087 	bne.w	80028f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e8:	4b92      	ldr	r3, [pc, #584]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x64>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e3ed      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	4b8b      	ldr	r3, [pc, #556]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_RCC_OscConfig+0x7e>
 8002810:	4b88      	ldr	r3, [pc, #544]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002818:	e005      	b.n	8002826 <HAL_RCC_OscConfig+0x8a>
 800281a:	4b86      	ldr	r3, [pc, #536]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 800281c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002826:	4293      	cmp	r3, r2
 8002828:	d223      	bcs.n	8002872 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fd90 	bl	8003354 <RCC_SetFlashLatencyFromMSIRange>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e3ce      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800283e:	4b7d      	ldr	r3, [pc, #500]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a7c      	ldr	r2, [pc, #496]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002844:	f043 0308 	orr.w	r3, r3, #8
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4977      	ldr	r1, [pc, #476]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285c:	4b75      	ldr	r3, [pc, #468]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	4972      	ldr	r1, [pc, #456]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
 8002870:	e025      	b.n	80028be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002872:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a6f      	ldr	r2, [pc, #444]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002878:	f043 0308 	orr.w	r3, r3, #8
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b6d      	ldr	r3, [pc, #436]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	496a      	ldr	r1, [pc, #424]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	4965      	ldr	r1, [pc, #404]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fd50 	bl	8003354 <RCC_SetFlashLatencyFromMSIRange>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e38e      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028be:	f000 fcbf 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80028c2:	4601      	mov	r1, r0
 80028c4:	4b5b      	ldr	r3, [pc, #364]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a5a      	ldr	r2, [pc, #360]	; (8002a38 <HAL_RCC_OscConfig+0x29c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	fa21 f303 	lsr.w	r3, r1, r3
 80028da:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <HAL_RCC_OscConfig+0x2a0>)
 80028dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028de:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <HAL_RCC_OscConfig+0x2a4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fe2e 	bl	8001544 <HAL_InitTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d052      	beq.n	8002998 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	e372      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d032      	beq.n	8002964 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028fe:	4b4d      	ldr	r3, [pc, #308]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a4c      	ldr	r2, [pc, #304]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800290a:	f7fe fe6b 	bl	80015e4 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002912:	f7fe fe67 	bl	80015e4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e35b      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002924:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002930:	4b40      	ldr	r3, [pc, #256]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a3f      	ldr	r2, [pc, #252]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	493a      	ldr	r1, [pc, #232]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294e:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	4935      	ldr	r1, [pc, #212]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
 8002962:	e01a      	b.n	800299a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002964:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a32      	ldr	r2, [pc, #200]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002970:	f7fe fe38 	bl	80015e4 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002978:	f7fe fe34 	bl	80015e4 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e328      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800298a:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1dc>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d073      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_OscConfig+0x21c>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d10e      	bne.n	80029d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d063      	beq.n	8002a8c <HAL_RCC_OscConfig+0x2f0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d15f      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e305      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x24c>
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a15      	ldr	r2, [pc, #84]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0x288>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x270>
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a0f      	ldr	r2, [pc, #60]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0x288>
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <HAL_RCC_OscConfig+0x298>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01b      	beq.n	8002a64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fdda 	bl	80015e4 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a32:	e010      	b.n	8002a56 <HAL_RCC_OscConfig+0x2ba>
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08003f78 	.word	0x08003f78
 8002a3c:	20000024 	.word	0x20000024
 8002a40:	20000028 	.word	0x20000028
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fdce 	bl	80015e4 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e2c2      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a56:	4baf      	ldr	r3, [pc, #700]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x2a8>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fdbe 	bl	80015e4 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fdba 	bl	80015e4 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e2ae      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a7e:	4ba5      	ldr	r3, [pc, #660]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2d0>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d060      	beq.n	8002b5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x310>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d119      	bne.n	8002ada <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d116      	bne.n	8002ada <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aac:	4b99      	ldr	r3, [pc, #612]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x328>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e28b      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b93      	ldr	r3, [pc, #588]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	4990      	ldr	r1, [pc, #576]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad8:	e040      	b.n	8002b5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d023      	beq.n	8002b2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae2:	4b8c      	ldr	r3, [pc, #560]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a8b      	ldr	r2, [pc, #556]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe fd79 	bl	80015e4 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7fe fd75 	bl	80015e4 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e269      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b08:	4b82      	ldr	r3, [pc, #520]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	4b7f      	ldr	r3, [pc, #508]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	497c      	ldr	r1, [pc, #496]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
 8002b28:	e018      	b.n	8002b5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2a:	4b7a      	ldr	r3, [pc, #488]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a79      	ldr	r2, [pc, #484]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe fd55 	bl	80015e4 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7fe fd51 	bl	80015e4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e245      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b50:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d03c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01c      	beq.n	8002baa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b70:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b76:	4a67      	ldr	r2, [pc, #412]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7fe fd30 	bl	80015e4 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b88:	f7fe fd2c 	bl	80015e4 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e220      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b9a:	4b5e      	ldr	r3, [pc, #376]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ef      	beq.n	8002b88 <HAL_RCC_OscConfig+0x3ec>
 8002ba8:	e01b      	b.n	8002be2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002baa:	4b5a      	ldr	r3, [pc, #360]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb0:	4a58      	ldr	r2, [pc, #352]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fe fd13 	bl	80015e4 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fd0f 	bl	80015e4 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e203      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd4:	4b4f      	ldr	r3, [pc, #316]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1ef      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80a6 	beq.w	8002d3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bf4:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b44      	ldr	r3, [pc, #272]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a43      	ldr	r2, [pc, #268]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1c:	4b3e      	ldr	r3, [pc, #248]	; (8002d18 <HAL_RCC_OscConfig+0x57c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d118      	bne.n	8002c5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c28:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <HAL_RCC_OscConfig+0x57c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a3a      	ldr	r2, [pc, #232]	; (8002d18 <HAL_RCC_OscConfig+0x57c>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c34:	f7fe fcd6 	bl	80015e4 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3c:	f7fe fcd2 	bl	80015e4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1c6      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4e:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <HAL_RCC_OscConfig+0x57c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4d8>
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c68:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c72:	e024      	b.n	8002cbe <HAL_RCC_OscConfig+0x522>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d110      	bne.n	8002c9e <HAL_RCC_OscConfig+0x502>
 8002c7c:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c8c:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9c:	e00f      	b.n	8002cbe <HAL_RCC_OscConfig+0x522>
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cae:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002cb6:	f023 0304 	bic.w	r3, r3, #4
 8002cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fc8d 	bl	80015e4 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe fc89 	bl	80015e4 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e17b      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_OscConfig+0x578>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0ed      	beq.n	8002cce <HAL_RCC_OscConfig+0x532>
 8002cf2:	e01a      	b.n	8002d2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fc76 	bl	80015e4 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cfa:	e00f      	b.n	8002d1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fc72 	bl	80015e4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d906      	bls.n	8002d1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e164      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d1c:	4ba8      	ldr	r3, [pc, #672]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e8      	bne.n	8002cfc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2a:	7ffb      	ldrb	r3, [r7, #31]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4ba3      	ldr	r3, [pc, #652]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	4aa2      	ldr	r2, [pc, #648]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d03c      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01c      	beq.n	8002d8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d50:	4b9b      	ldr	r3, [pc, #620]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d56:	4a9a      	ldr	r2, [pc, #616]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe fc40 	bl	80015e4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d68:	f7fe fc3c 	bl	80015e4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e130      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d7a:	4b91      	ldr	r3, [pc, #580]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ef      	beq.n	8002d68 <HAL_RCC_OscConfig+0x5cc>
 8002d88:	e01b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d8a:	4b8d      	ldr	r3, [pc, #564]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d90:	4a8b      	ldr	r2, [pc, #556]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fc23 	bl	80015e4 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da2:	f7fe fc1f 	bl	80015e4 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e113      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002db4:	4b82      	ldr	r3, [pc, #520]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1ef      	bne.n	8002da2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8107 	beq.w	8002fda <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	f040 80cb 	bne.w	8002f6c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dd6:	4b7a      	ldr	r3, [pc, #488]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0203 	and.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d12c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	3b01      	subs	r3, #1
 8002df6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d123      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d11b      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d113      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d109      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d06d      	beq.n	8002f20 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d068      	beq.n	8002f1c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e4a:	4b5d      	ldr	r3, [pc, #372]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e56:	4b5a      	ldr	r3, [pc, #360]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0ba      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e66:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a55      	ldr	r2, [pc, #340]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e72:	f7fe fbb7 	bl	80015e4 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe fbb3 	bl	80015e4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e0a7      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8c:	4b4c      	ldr	r3, [pc, #304]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e98:	4b49      	ldr	r3, [pc, #292]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <HAL_RCC_OscConfig+0x828>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ea8:	3a01      	subs	r2, #1
 8002eaa:	0112      	lsls	r2, r2, #4
 8002eac:	4311      	orrs	r1, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eb2:	0212      	lsls	r2, r2, #8
 8002eb4:	4311      	orrs	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eba:	0852      	lsrs	r2, r2, #1
 8002ebc:	3a01      	subs	r2, #1
 8002ebe:	0552      	lsls	r2, r2, #21
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ec6:	0852      	lsrs	r2, r2, #1
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	0652      	lsls	r2, r2, #25
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ed2:	06d2      	lsls	r2, r2, #27
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	493a      	ldr	r1, [pc, #232]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002edc:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a37      	ldr	r2, [pc, #220]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee8:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a34      	ldr	r2, [pc, #208]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ef4:	f7fe fb76 	bl	80015e4 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fe fb72 	bl	80015e4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e066      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0e:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f1a:	e05e      	b.n	8002fda <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e05d      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d156      	bne.n	8002fda <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a20      	ldr	r2, [pc, #128]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f44:	f7fe fb4e 	bl	80015e4 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe fb4a 	bl	80015e4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e03e      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5e:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x7b0>
 8002f6a:	e036      	b.n	8002fda <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d031      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f90:	f023 0303 	bic.w	r3, r3, #3
 8002f94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <HAL_RCC_OscConfig+0x824>)
 8002f9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa6:	f7fe fb1d 	bl	80015e4 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fac:	e00c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fae:	f7fe fb19 	bl	80015e4 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d905      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e00d      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_OscConfig+0x848>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ec      	bne.n	8002fae <HAL_RCC_OscConfig+0x812>
 8002fd4:	e001      	b.n	8002fda <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e10f      	b.n	8003220 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b89      	ldr	r3, [pc, #548]	; (8003228 <HAL_RCC_ClockConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d910      	bls.n	8003030 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b86      	ldr	r3, [pc, #536]	; (8003228 <HAL_RCC_ClockConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 020f 	bic.w	r2, r3, #15
 8003016:	4984      	ldr	r1, [pc, #528]	; (8003228 <HAL_RCC_ClockConfig+0x240>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b82      	ldr	r3, [pc, #520]	; (8003228 <HAL_RCC_ClockConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0f7      	b.n	8003220 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8089 	beq.w	8003150 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d133      	bne.n	80030ae <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003046:	4b79      	ldr	r3, [pc, #484]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e0e4      	b.n	8003220 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003056:	f000 f9d7 	bl	8003408 <RCC_GetSysClockFreqFromPLLSource>
 800305a:	4602      	mov	r2, r0
 800305c:	4b74      	ldr	r3, [pc, #464]	; (8003230 <HAL_RCC_ClockConfig+0x248>)
 800305e:	429a      	cmp	r2, r3
 8003060:	d955      	bls.n	800310e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003062:	4b72      	ldr	r3, [pc, #456]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800306e:	4b6f      	ldr	r3, [pc, #444]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003076:	4a6d      	ldr	r2, [pc, #436]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e044      	b.n	800310e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d03e      	beq.n	800310e <HAL_RCC_ClockConfig+0x126>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d13a      	bne.n	800310e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003098:	4b64      	ldr	r3, [pc, #400]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a0:	4a62      	ldr	r2, [pc, #392]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 80030a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	e02f      	b.n	800310e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b6:	4b5d      	ldr	r3, [pc, #372]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d115      	bne.n	80030ee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e0ac      	b.n	8003220 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d107      	bne.n	80030de <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ce:	4b57      	ldr	r3, [pc, #348]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0a0      	b.n	8003220 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030de:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e098      	b.n	8003220 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80030ee:	f000 f8a7 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80030f2:	4602      	mov	r2, r0
 80030f4:	4b4e      	ldr	r3, [pc, #312]	; (8003230 <HAL_RCC_ClockConfig+0x248>)
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d909      	bls.n	800310e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030fa:	4b4c      	ldr	r3, [pc, #304]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003102:	4a4a      	ldr	r2, [pc, #296]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 8003104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003108:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f023 0203 	bic.w	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4944      	ldr	r1, [pc, #272]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003120:	f7fe fa60 	bl	80015e4 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	e00a      	b.n	800313e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003128:	f7fe fa5c 	bl	80015e4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e070      	b.n	8003220 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 020c 	and.w	r2, r3, #12
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d1eb      	bne.n	8003128 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800315c:	4b33      	ldr	r3, [pc, #204]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4930      	ldr	r1, [pc, #192]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
 800316e:	e008      	b.n	8003182 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d105      	bne.n	8003182 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	4a2c      	ldr	r2, [pc, #176]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 800317c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003180:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RCC_ClockConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d210      	bcs.n	80031b2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_RCC_ClockConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 020f 	bic.w	r2, r3, #15
 8003198:	4923      	ldr	r1, [pc, #140]	; (8003228 <HAL_RCC_ClockConfig+0x240>)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a0:	4b21      	ldr	r3, [pc, #132]	; (8003228 <HAL_RCC_ClockConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e036      	b.n	8003220 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	4918      	ldr	r1, [pc, #96]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d009      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031dc:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4910      	ldr	r1, [pc, #64]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031f0:	f000 f826 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031f4:	4601      	mov	r1, r0
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_RCC_ClockConfig+0x244>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <HAL_RCC_ClockConfig+0x24c>)
 8003202:	5cd3      	ldrb	r3, [r2, r3]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	fa21 f303 	lsr.w	r3, r1, r3
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_RCC_ClockConfig+0x250>)
 800320e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_RCC_ClockConfig+0x254>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe f995 	bl	8001544 <HAL_InitTick>
 800321a:	4603      	mov	r3, r0
 800321c:	73fb      	strb	r3, [r7, #15]

  return status;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40022000 	.word	0x40022000
 800322c:	40021000 	.word	0x40021000
 8003230:	04c4b400 	.word	0x04c4b400
 8003234:	08003f78 	.word	0x08003f78
 8003238:	20000024 	.word	0x20000024
 800323c:	20000028 	.word	0x20000028

08003240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_RCC_GetSysClockFreq+0x104>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003258:	4b3a      	ldr	r3, [pc, #232]	; (8003344 <HAL_RCC_GetSysClockFreq+0x104>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x34>
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d121      	bne.n	80032b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d11e      	bne.n	80032b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003274:	4b33      	ldr	r3, [pc, #204]	; (8003344 <HAL_RCC_GetSysClockFreq+0x104>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d107      	bne.n	8003290 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003280:	4b30      	ldr	r3, [pc, #192]	; (8003344 <HAL_RCC_GetSysClockFreq+0x104>)
 8003282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	e005      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003290:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <HAL_RCC_GetSysClockFreq+0x104>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800329c:	4a2a      	ldr	r2, [pc, #168]	; (8003348 <HAL_RCC_GetSysClockFreq+0x108>)
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10d      	bne.n	80032c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d102      	bne.n	80032be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032b8:	4b24      	ldr	r3, [pc, #144]	; (800334c <HAL_RCC_GetSysClockFreq+0x10c>)
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	e004      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032c4:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_RCC_GetSysClockFreq+0x110>)
 80032c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b0c      	cmp	r3, #12
 80032cc:	d133      	bne.n	8003336 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ce:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_RCC_GetSysClockFreq+0x104>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0xa4>
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0xaa>
 80032e2:	e005      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <HAL_RCC_GetSysClockFreq+0x10c>)
 80032e6:	617b      	str	r3, [r7, #20]
      break;
 80032e8:	e005      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032ea:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ec:	617b      	str	r3, [r7, #20]
      break;
 80032ee:	e002      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	617b      	str	r3, [r7, #20]
      break;
 80032f4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <HAL_RCC_GetSysClockFreq+0x104>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	3301      	adds	r3, #1
 8003302:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <HAL_RCC_GetSysClockFreq+0x104>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	fb02 f203 	mul.w	r2, r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_GetSysClockFreq+0x104>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	0e5b      	lsrs	r3, r3, #25
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	3301      	adds	r3, #1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003336:	69bb      	ldr	r3, [r7, #24]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3724      	adds	r7, #36	; 0x24
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40021000 	.word	0x40021000
 8003348:	08003f88 	.word	0x08003f88
 800334c:	00f42400 	.word	0x00f42400
 8003350:	007a1200 	.word	0x007a1200

08003354 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003360:	4b27      	ldr	r3, [pc, #156]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800336c:	f7ff f952 	bl	8002614 <HAL_PWREx_GetVoltageRange>
 8003370:	6178      	str	r0, [r7, #20]
 8003372:	e014      	b.n	800339e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003374:	4b22      	ldr	r3, [pc, #136]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	4a21      	ldr	r2, [pc, #132]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800337a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337e:	6593      	str	r3, [r2, #88]	; 0x58
 8003380:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800338c:	f7ff f942 	bl	8002614 <HAL_PWREx_GetVoltageRange>
 8003390:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	4a1a      	ldr	r2, [pc, #104]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a4:	d10b      	bne.n	80033be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b80      	cmp	r3, #128	; 0x80
 80033aa:	d913      	bls.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2ba0      	cmp	r3, #160	; 0xa0
 80033b0:	d902      	bls.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033b2:	2302      	movs	r3, #2
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	e00d      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b8:	2301      	movs	r3, #1
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e00a      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b7f      	cmp	r3, #127	; 0x7f
 80033c2:	d902      	bls.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80033c4:	2302      	movs	r3, #2
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	e004      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b70      	cmp	r3, #112	; 0x70
 80033ce:	d101      	bne.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d0:	2301      	movs	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 020f 	bic.w	r2, r3, #15
 80033dc:	4909      	ldr	r1, [pc, #36]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d001      	beq.n	80033f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	40022000 	.word	0x40022000

08003408 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d118      	bne.n	8003450 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800341e:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d107      	bne.n	800343a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800342a:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800342c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	e005      	b.n	8003446 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800343a:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003446:	4a21      	ldr	r2, [pc, #132]	; (80034cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003450:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d002      	beq.n	8003466 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003460:	2b03      	cmp	r3, #3
 8003462:	d003      	beq.n	800346c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003464:	e005      	b.n	8003472 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003468:	613b      	str	r3, [r7, #16]
    break;
 800346a:	e005      	b.n	8003478 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800346e:	613b      	str	r3, [r7, #16]
    break;
 8003470:	e002      	b.n	8003478 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	613b      	str	r3, [r7, #16]
    break;
 8003476:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003478:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	3301      	adds	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	fb02 f203 	mul.w	r2, r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	0e5b      	lsrs	r3, r3, #25
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	3301      	adds	r3, #1
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80034b8:	683b      	ldr	r3, [r7, #0]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08003f88 	.word	0x08003f88
 80034d0:	00f42400 	.word	0x00f42400
 80034d4:	007a1200 	.word	0x007a1200

080034d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034e0:	2300      	movs	r3, #0
 80034e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034e4:	2300      	movs	r3, #0
 80034e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d03d      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d00b      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	d804      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00e      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d015      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003508:	e01d      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800350a:	2b60      	cmp	r3, #96	; 0x60
 800350c:	d01e      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800350e:	2b80      	cmp	r3, #128	; 0x80
 8003510:	d01c      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003512:	e018      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003514:	4b86      	ldr	r3, [pc, #536]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a85      	ldr	r2, [pc, #532]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003520:	e015      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fafd 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003532:	e00c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3320      	adds	r3, #32
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fbe4 	bl	8003d08 <RCCEx_PLLSAI2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	74fb      	strb	r3, [r7, #19]
      break;
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 800354c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003554:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800355a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003562:	4973      	ldr	r1, [pc, #460]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800356a:	e001      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d042      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003584:	d00f      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800358a:	d805      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d011      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003594:	d017      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003596:	e01f      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800359c:	d01f      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x106>
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a2:	d01c      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035a4:	e018      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035a6:	4b62      	ldr	r3, [pc, #392]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	4a61      	ldr	r2, [pc, #388]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035b2:	e015      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	2100      	movs	r1, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fab4 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c4:	e00c      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3320      	adds	r3, #32
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fb9b 	bl	8003d08 <RCCEx_PLLSAI2_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035d6:	e003      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	74fb      	strb	r3, [r7, #19]
      break;
 80035dc:	e000      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80035de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035e6:	4b52      	ldr	r3, [pc, #328]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	494e      	ldr	r1, [pc, #312]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80035fc:	e001      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 809f 	beq.w	800374e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003610:	2300      	movs	r3, #0
 8003612:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003614:	4b46      	ldr	r3, [pc, #280]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003624:	2300      	movs	r3, #0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b41      	ldr	r3, [pc, #260]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	4a40      	ldr	r2, [pc, #256]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003634:	6593      	str	r3, [r2, #88]	; 0x58
 8003636:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003642:	2301      	movs	r3, #1
 8003644:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3a      	ldr	r2, [pc, #232]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003652:	f7fd ffc7 	bl	80015e4 <HAL_GetTick>
 8003656:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003658:	e009      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fd ffc3 	bl	80015e4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d902      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	74fb      	strb	r3, [r7, #19]
        break;
 800366c:	e005      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800366e:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ef      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d15b      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003680:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01f      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	429a      	cmp	r2, r3
 800369c:	d019      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800369e:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036aa:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	4a1f      	ldr	r2, [pc, #124]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036ba:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	4a1b      	ldr	r2, [pc, #108]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036ca:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d016      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fd ff82 	bl	80015e4 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e2:	e00b      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e4:	f7fd ff7e 	bl	80015e4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d902      	bls.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	74fb      	strb	r3, [r7, #19]
            break;
 80036fa:	e006      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0ec      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10c      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003720:	4903      	ldr	r1, [pc, #12]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003728:	e008      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	74bb      	strb	r3, [r7, #18]
 800372e:	e005      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003730:	40021000 	.word	0x40021000
 8003734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800373c:	7c7b      	ldrb	r3, [r7, #17]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	4ba0      	ldr	r3, [pc, #640]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	4a9f      	ldr	r2, [pc, #636]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800375a:	4b9a      	ldr	r3, [pc, #616]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f023 0203 	bic.w	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003768:	4996      	ldr	r1, [pc, #600]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800377c:	4b91      	ldr	r3, [pc, #580]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f023 020c 	bic.w	r2, r3, #12
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	498e      	ldr	r1, [pc, #568]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800379e:	4b89      	ldr	r3, [pc, #548]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	4985      	ldr	r1, [pc, #532]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037c0:	4b80      	ldr	r3, [pc, #512]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ce:	497d      	ldr	r1, [pc, #500]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037e2:	4b78      	ldr	r3, [pc, #480]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f0:	4974      	ldr	r1, [pc, #464]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003804:	4b6f      	ldr	r3, [pc, #444]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003812:	496c      	ldr	r1, [pc, #432]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003826:	4b67      	ldr	r3, [pc, #412]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003834:	4963      	ldr	r1, [pc, #396]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003848:	4b5e      	ldr	r3, [pc, #376]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003856:	495b      	ldr	r1, [pc, #364]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800386a:	4b56      	ldr	r3, [pc, #344]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	4952      	ldr	r1, [pc, #328]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800388c:	4b4d      	ldr	r3, [pc, #308]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	494a      	ldr	r1, [pc, #296]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ae:	4b45      	ldr	r3, [pc, #276]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	4941      	ldr	r1, [pc, #260]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038d0:	4b3c      	ldr	r3, [pc, #240]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038d6:	f023 0203 	bic.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038de:	4939      	ldr	r1, [pc, #228]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d028      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f2:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003900:	4930      	ldr	r1, [pc, #192]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003910:	d106      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003912:	4b2c      	ldr	r3, [pc, #176]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	4a2b      	ldr	r2, [pc, #172]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800391c:	60d3      	str	r3, [r2, #12]
 800391e:	e011      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003928:	d10c      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	2101      	movs	r1, #1
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f8f9 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d04d      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003958:	d108      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x494>
 800395a:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003960:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003966:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800396a:	e012      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800396c:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003972:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003978:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398a:	490e      	ldr	r1, [pc, #56]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800399a:	d106      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a08      	ldr	r2, [pc, #32]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039a6:	60d3      	str	r3, [r2, #12]
 80039a8:	e020      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039b2:	d109      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a02      	ldr	r2, [pc, #8]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039be:	60d3      	str	r3, [r2, #12]
 80039c0:	e014      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2101      	movs	r1, #1
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 f8a5 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e2:	7cfb      	ldrb	r3, [r7, #19]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d028      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f8:	4b4a      	ldr	r3, [pc, #296]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a06:	4947      	ldr	r1, [pc, #284]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a16:	d106      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a18:	4b42      	ldr	r3, [pc, #264]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a41      	ldr	r2, [pc, #260]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a22:	60d3      	str	r3, [r2, #12]
 8003a24:	e011      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a2e:	d10c      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	2101      	movs	r1, #1
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f876 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003a46:	7cfb      	ldrb	r3, [r7, #19]
 8003a48:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01e      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a56:	4b33      	ldr	r3, [pc, #204]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a66:	492f      	ldr	r1, [pc, #188]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2102      	movs	r1, #2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f851 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aa0:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aa6:	f023 0204 	bic.w	r2, r3, #4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab0:	491c      	ldr	r1, [pc, #112]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00b      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ac4:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aca:	f023 0218 	bic.w	r2, r3, #24
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	4913      	ldr	r1, [pc, #76]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d017      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af8:	490a      	ldr	r1, [pc, #40]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b0a:	d105      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b18:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000

08003b28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b36:	4b70      	ldr	r3, [pc, #448]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00e      	beq.n	8003b60 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b42:	4b6d      	ldr	r3, [pc, #436]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0203 	and.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d103      	bne.n	8003b5a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
       ||
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d13f      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e03c      	b.n	8003bda <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d00c      	beq.n	8003b82 <RCCEx_PLLSAI1_Config+0x5a>
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d013      	beq.n	8003b94 <RCCEx_PLLSAI1_Config+0x6c>
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d120      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b70:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11d      	bne.n	8003bb8 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b80:	e01a      	b.n	8003bb8 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b82:	4b5d      	ldr	r3, [pc, #372]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d116      	bne.n	8003bbc <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b92:	e013      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b94:	4b58      	ldr	r3, [pc, #352]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10f      	bne.n	8003bc0 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ba0:	4b55      	ldr	r3, [pc, #340]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bb0:	e006      	b.n	8003bc0 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb6:	e004      	b.n	8003bc2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bb8:	bf00      	nop
 8003bba:	e002      	b.n	8003bc2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bc0:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d108      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003bc8:	4b4b      	ldr	r3, [pc, #300]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f023 0203 	bic.w	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4948      	ldr	r1, [pc, #288]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f040 8086 	bne.w	8003cee <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003be2:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a44      	ldr	r2, [pc, #272]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003be8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bee:	f7fd fcf9 	bl	80015e4 <HAL_GetTick>
 8003bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bf4:	e009      	b.n	8003c0a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bf6:	f7fd fcf5 	bl	80015e4 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d902      	bls.n	8003c0a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	73fb      	strb	r3, [r7, #15]
        break;
 8003c08:	e005      	b.n	8003c16 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c0a:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ef      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d168      	bne.n	8003cee <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d113      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c22:	4b35      	ldr	r3, [pc, #212]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1d4>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6892      	ldr	r2, [r2, #8]
 8003c2e:	0211      	lsls	r1, r2, #8
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	68d2      	ldr	r2, [r2, #12]
 8003c34:	06d2      	lsls	r2, r2, #27
 8003c36:	4311      	orrs	r1, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6852      	ldr	r2, [r2, #4]
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	0112      	lsls	r2, r2, #4
 8003c40:	430a      	orrs	r2, r1
 8003c42:	492d      	ldr	r1, [pc, #180]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	610b      	str	r3, [r1, #16]
 8003c48:	e02d      	b.n	8003ca6 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d115      	bne.n	8003c7c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c50:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	4b2a      	ldr	r3, [pc, #168]	; (8003d00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6892      	ldr	r2, [r2, #8]
 8003c5c:	0211      	lsls	r1, r2, #8
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6912      	ldr	r2, [r2, #16]
 8003c62:	0852      	lsrs	r2, r2, #1
 8003c64:	3a01      	subs	r2, #1
 8003c66:	0552      	lsls	r2, r2, #21
 8003c68:	4311      	orrs	r1, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6852      	ldr	r2, [r2, #4]
 8003c6e:	3a01      	subs	r2, #1
 8003c70:	0112      	lsls	r2, r2, #4
 8003c72:	430a      	orrs	r2, r1
 8003c74:	4920      	ldr	r1, [pc, #128]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	610b      	str	r3, [r1, #16]
 8003c7a:	e014      	b.n	8003ca6 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c7c:	4b1e      	ldr	r3, [pc, #120]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6892      	ldr	r2, [r2, #8]
 8003c88:	0211      	lsls	r1, r2, #8
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6952      	ldr	r2, [r2, #20]
 8003c8e:	0852      	lsrs	r2, r2, #1
 8003c90:	3a01      	subs	r2, #1
 8003c92:	0652      	lsls	r2, r2, #25
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6852      	ldr	r2, [r2, #4]
 8003c9a:	3a01      	subs	r2, #1
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	4915      	ldr	r1, [pc, #84]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ca6:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fc97 	bl	80015e4 <HAL_GetTick>
 8003cb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cb8:	e009      	b.n	8003cce <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cba:	f7fd fc93 	bl	80015e4 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d902      	bls.n	8003cce <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	73fb      	strb	r3, [r7, #15]
          break;
 8003ccc:	e005      	b.n	8003cda <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0ef      	beq.n	8003cba <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d106      	bne.n	8003cee <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	4903      	ldr	r1, [pc, #12]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	07ff800f 	.word	0x07ff800f
 8003d00:	ff9f800f 	.word	0xff9f800f
 8003d04:	f9ff800f 	.word	0xf9ff800f

08003d08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d16:	4b70      	ldr	r3, [pc, #448]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00e      	beq.n	8003d40 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d22:	4b6d      	ldr	r3, [pc, #436]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0203 	and.w	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d103      	bne.n	8003d3a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
       ||
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d13f      	bne.n	8003dba <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
 8003d3e:	e03c      	b.n	8003dba <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d00c      	beq.n	8003d62 <RCCEx_PLLSAI2_Config+0x5a>
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d013      	beq.n	8003d74 <RCCEx_PLLSAI2_Config+0x6c>
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d120      	bne.n	8003d92 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d50:	4b61      	ldr	r3, [pc, #388]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11d      	bne.n	8003d98 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d60:	e01a      	b.n	8003d98 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d62:	4b5d      	ldr	r3, [pc, #372]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d116      	bne.n	8003d9c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d72:	e013      	b.n	8003d9c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d74:	4b58      	ldr	r3, [pc, #352]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10f      	bne.n	8003da0 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d80:	4b55      	ldr	r3, [pc, #340]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d90:	e006      	b.n	8003da0 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
      break;
 8003d96:	e004      	b.n	8003da2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003d98:	bf00      	nop
 8003d9a:	e002      	b.n	8003da2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003d9c:	bf00      	nop
 8003d9e:	e000      	b.n	8003da2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003da0:	bf00      	nop
    }

    if(status == HAL_OK)
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d108      	bne.n	8003dba <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003da8:	4b4b      	ldr	r3, [pc, #300]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f023 0203 	bic.w	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4948      	ldr	r1, [pc, #288]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 8086 	bne.w	8003ece <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dc2:	4b45      	ldr	r3, [pc, #276]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a44      	ldr	r2, [pc, #272]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dce:	f7fd fc09 	bl	80015e4 <HAL_GetTick>
 8003dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dd4:	e009      	b.n	8003dea <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dd6:	f7fd fc05 	bl	80015e4 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d902      	bls.n	8003dea <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	73fb      	strb	r3, [r7, #15]
        break;
 8003de8:	e005      	b.n	8003df6 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dea:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1ef      	bne.n	8003dd6 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d168      	bne.n	8003ece <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d113      	bne.n	8003e2a <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e02:	4b35      	ldr	r3, [pc, #212]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	4b35      	ldr	r3, [pc, #212]	; (8003edc <RCCEx_PLLSAI2_Config+0x1d4>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6892      	ldr	r2, [r2, #8]
 8003e0e:	0211      	lsls	r1, r2, #8
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68d2      	ldr	r2, [r2, #12]
 8003e14:	06d2      	lsls	r2, r2, #27
 8003e16:	4311      	orrs	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6852      	ldr	r2, [r2, #4]
 8003e1c:	3a01      	subs	r2, #1
 8003e1e:	0112      	lsls	r2, r2, #4
 8003e20:	430a      	orrs	r2, r1
 8003e22:	492d      	ldr	r1, [pc, #180]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	614b      	str	r3, [r1, #20]
 8003e28:	e02d      	b.n	8003e86 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d115      	bne.n	8003e5c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e30:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6892      	ldr	r2, [r2, #8]
 8003e3c:	0211      	lsls	r1, r2, #8
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6912      	ldr	r2, [r2, #16]
 8003e42:	0852      	lsrs	r2, r2, #1
 8003e44:	3a01      	subs	r2, #1
 8003e46:	0552      	lsls	r2, r2, #21
 8003e48:	4311      	orrs	r1, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6852      	ldr	r2, [r2, #4]
 8003e4e:	3a01      	subs	r2, #1
 8003e50:	0112      	lsls	r2, r2, #4
 8003e52:	430a      	orrs	r2, r1
 8003e54:	4920      	ldr	r1, [pc, #128]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	614b      	str	r3, [r1, #20]
 8003e5a:	e014      	b.n	8003e86 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6892      	ldr	r2, [r2, #8]
 8003e68:	0211      	lsls	r1, r2, #8
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6952      	ldr	r2, [r2, #20]
 8003e6e:	0852      	lsrs	r2, r2, #1
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0652      	lsls	r2, r2, #25
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6852      	ldr	r2, [r2, #4]
 8003e7a:	3a01      	subs	r2, #1
 8003e7c:	0112      	lsls	r2, r2, #4
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	4915      	ldr	r1, [pc, #84]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e86:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fd fba7 	bl	80015e4 <HAL_GetTick>
 8003e96:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e98:	e009      	b.n	8003eae <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e9a:	f7fd fba3 	bl	80015e4 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d902      	bls.n	8003eae <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	73fb      	strb	r3, [r7, #15]
          break;
 8003eac:	e005      	b.n	8003eba <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ef      	beq.n	8003e9a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ec2:	695a      	ldr	r2, [r3, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	07ff800f 	.word	0x07ff800f
 8003ee0:	ff9f800f 	.word	0xff9f800f
 8003ee4:	f9ff800f 	.word	0xf9ff800f

08003ee8 <__libc_init_array>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	4e0d      	ldr	r6, [pc, #52]	; (8003f20 <__libc_init_array+0x38>)
 8003eec:	4c0d      	ldr	r4, [pc, #52]	; (8003f24 <__libc_init_array+0x3c>)
 8003eee:	1ba4      	subs	r4, r4, r6
 8003ef0:	10a4      	asrs	r4, r4, #2
 8003ef2:	2500      	movs	r5, #0
 8003ef4:	42a5      	cmp	r5, r4
 8003ef6:	d109      	bne.n	8003f0c <__libc_init_array+0x24>
 8003ef8:	4e0b      	ldr	r6, [pc, #44]	; (8003f28 <__libc_init_array+0x40>)
 8003efa:	4c0c      	ldr	r4, [pc, #48]	; (8003f2c <__libc_init_array+0x44>)
 8003efc:	f000 f82c 	bl	8003f58 <_init>
 8003f00:	1ba4      	subs	r4, r4, r6
 8003f02:	10a4      	asrs	r4, r4, #2
 8003f04:	2500      	movs	r5, #0
 8003f06:	42a5      	cmp	r5, r4
 8003f08:	d105      	bne.n	8003f16 <__libc_init_array+0x2e>
 8003f0a:	bd70      	pop	{r4, r5, r6, pc}
 8003f0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f10:	4798      	blx	r3
 8003f12:	3501      	adds	r5, #1
 8003f14:	e7ee      	b.n	8003ef4 <__libc_init_array+0xc>
 8003f16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f1a:	4798      	blx	r3
 8003f1c:	3501      	adds	r5, #1
 8003f1e:	e7f2      	b.n	8003f06 <__libc_init_array+0x1e>
 8003f20:	08003fb8 	.word	0x08003fb8
 8003f24:	08003fb8 	.word	0x08003fb8
 8003f28:	08003fb8 	.word	0x08003fb8
 8003f2c:	08003fbc 	.word	0x08003fbc

08003f30 <memcpy>:
 8003f30:	b510      	push	{r4, lr}
 8003f32:	1e43      	subs	r3, r0, #1
 8003f34:	440a      	add	r2, r1
 8003f36:	4291      	cmp	r1, r2
 8003f38:	d100      	bne.n	8003f3c <memcpy+0xc>
 8003f3a:	bd10      	pop	{r4, pc}
 8003f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f44:	e7f7      	b.n	8003f36 <memcpy+0x6>

08003f46 <memset>:
 8003f46:	4402      	add	r2, r0
 8003f48:	4603      	mov	r3, r0
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d100      	bne.n	8003f50 <memset+0xa>
 8003f4e:	4770      	bx	lr
 8003f50:	f803 1b01 	strb.w	r1, [r3], #1
 8003f54:	e7f9      	b.n	8003f4a <memset+0x4>
	...

08003f58 <_init>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr

08003f64 <_fini>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	bf00      	nop
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr
